---
title: "A code template"
format:
  html: 
    toc: false
    section-divs: true
    include-after-body: 
      - text: |
          <script src="/js/progressive-reveal.js"></script>
          <script src="/js/bootstrapify.js"></script>

engine: knitr
filters:
  - webr
webr:
  packages:
    - ggplot2
  cell-options:
    editor-font-scale: 0.85
    fig-width: 6
    fig-height: 3.7
    out-width: "70%"
---

```{r include=FALSE}
knitr::opts_chunk$set(
  fig.width = 6,
  fig.height = 6 * 0.618,
  fig.retina = 3,
  dev = "ragg_png",
  fig.align = "center",
  out.width = "70%"
)

library(tidyverse)
library(checkdown)
library(here)

source(here::here("R", "helpers.R"))
```

> "The simple graph has brought more information to the data analystâ€™s mind than any other device." 
> 
> --- John Tukey

### 

Let's begin with a question to explore.

::: {.callout-note appearance="simple" icon=false .question}

**What do you think: Do cars with bigger engines use more fuel than cars with smaller engines?**

```{r}
#| label: q-predict
#| echo: FALSE

check_question(
  answer = c(
   "Cars with bigger engines use more fuel.",
   "Cars with bigger engines use less fuel."
  ), 
  options = c(
   "Cars with bigger engines use more fuel.",
   "Cars with bigger engines use less fuel."
  ), 
  type = "radio", 
  button_label = "Submit answer", 
  q_id = 1,
  right = c("It could go either way! In other words, there might be a positive or a negative relationship between engine size and fuel efficiency. Now let's test your hypothesis with data.")
)
```
:::


### `mpg`

You can test your hypothesis with the `mpg` dataset that comes in the `ggplot2` package. `mpg` contains observations collected on 38 models of cars by the US Environmental Protection Agency. 

To see the `mpg` data frame, type `mpg` in the code block below and click "Run Code".

::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive editor

```{webr-r}

```

## {{< fa circle-check >}}&ensp;Solution

```r
mpg
```

:::

###

Good job!  We'll use interactive code chunks like this throughout these tutorials. Whenever you encounter one, you can click Run Code to run (or re-run) the code in the chunk. If there is a Solution tab, you can click it to see the answer.


###

To see the help-page describing the `mpg` data-set, please type `?mpg` in the code chunk below, and hit Run Code. Then answer the following questions: 


::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive editor

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solution

```r
?mpg
```

:::




::: {.callout-note appearance="simple" icon=false .question}

**The `mpg` dataset consists of several columns of data. What is true about those columns (choose more than one)? **

```{r}
#| label: q-mpg-help
#| echo: FALSE
check_question(
  answer = c(
   "`displ` measures engine's volume (in litres).",
   "`cty` and `hwy` measure fuel efficiency.",
   "`manufacturer` is a categorical variable."
  ), 
  options = c(
   "`displ` measures engine's volume (in litres).",
   "`cty` and `hwy` measure fuel efficiency.",
   "`drv` and `class` are continuous variables.",
   "`manufacturer` is a categorical variable."
  ), 
  type = "checkbox", 
  random_answer_order = TRUE,
  button_label = "Submit answer", 
  
  q_id = 2,
  right = c("Excellent job! Mighty fine!")
)
```
:::



###




Among the variables in `mpg` are:

1. `displ`, a car's engine size, in liters.
1. `hwy`, a car's fuel efficiency on the highway, in miles per gallon (mpg). A car with a low mpg is less efficient, needing more fuel per mile than a car with a high mpg.

Now let's use this data to make our first graph.

### A plot

The code below uses functions from the **ggplot2** package to plot the relationship between `displ` and `hwy`. 

To see the plot, click "Run Code."




```{webr-r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point()
```



::: {.callout-note appearance="simple" icon=false .question}

**The code above uses the `mapping` argument to map data to graphical features. Which data-columns are being mapped to which graphical features? (Choose more than one option.) **

```{r}
#| label: q-ggplot-mapping
#| echo: FALSE
check_question(
  answer = c(
   "Data column `displ` is mapped to the x-axis.",
   "Data column `hwy` is mapped to the y-axis."
  ), 
  options = c(
   "Data column `displ` is mapped to the x-axis.",
   "Data column `hwy` is mapped to the y-axis.",
   "Data column `hwy` is mapped to the x-axis.",
   "Data column `displ` is mapped to the y-axis."
  ), 
  type = "checkbox", 
  random_answer_order = TRUE,
  button_label = "Submit answer", 
  q_id = 3,
  right = c("That's correct! The code: `aes(x = displ, y = hwy)` maps the data columns `displ` to the `x-axis` and `hwy` to the `y-axis`.")
)
```
:::



### Can you spot the relationship between `displ` and `hwy`?

The plot shows a negative relationship between engine size (`displ`) and fuel efficiency (`hwy`). Points that have a large value of `displ` have a small value of `hwy` and vice versa.

In other words, cars with big engines use _more_ fuel. If that was your hypothesis, you were right!

Now let's look at how we made the plot.

### `ggplot()`

Here's the code that we used to make the plot. Notice that it contains three functions: `ggplot()`, `geom_point()`, and `aes()`.

```{r eval=FALSE}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point()
```

In R, a function is a name followed by a set of parentheses. Many functions require special information to do their jobs, and you write this information between the parentheses.

### `ggplot`

The first function, `ggplot()`, creates a coordinate system that you can add layers to. The first argument of `ggplot()` is the dataset to use in the graph. 

By itself, `ggplot(data = mpg)` creates an empty graph, which looks like this: try it!


```{webr-r}
ggplot(data = mpg)

```


You should see an empty canvas. To plot something on the canvas, we need to add layers!


### `geom_point()`

`geom_point()` adds a layer of points to the empty plot created by `ggplot()`. This gives us a scatterplot. 

```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point()
```

### `mapping = aes()`

`geom_point()` takes a `mapping` argument that defines which variables in your dataset are mapped to which axes in your graph. The `mapping` argument is always paired with the function `aes()`, which you use to gather together all of the mappings that you want to create. 

Here, we want to map the `displ` variable to the x axis and the `hwy` variable to the y axis, so we add `x = displ` and `y = hwy` inside of `aes()` (and we separate them with a comma). 

Where will ggplot2 look for these mapped variables? In the data frame that we passed to the `data` argument, in this case, `mpg`.

### A graphing workflow

Our code follows the common workflow for making graphs with ggplot2. To make a graph, you: 

1. Start the graph with `ggplot()`
1. Add elements to the graph with a `geom_` function
1. Map the data columns to the graphical features with  `mapping = aes()` argument

You may place the `mapping = aes()` argument within either

- the `ggplot()` function, e.g., `ggplot(data, mapping = aes(x, y))`
- the `geom_` layer, e.g, `geom_point(mapping = aes(x, y))`

### A graphing template

In fact, you can turn our code into a reusable template for making graphs. To make a graph, replace the bracketed sections in the code below with a data set, a `geom_` function, or a collection of mappings.

Give it a try! Replace the bracketed sections with `mpg`, `geom_boxplot`, and `x = class, y = hwy` to make a slightly different graph. Be sure to delete the `#` symbols before you run the code.

::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive editor

```{webr-r}
# ggplot(data = <DATA>, mapping = aes(<MAPPINGS>)) + 
#  <GEOM_FUNCTION>()
```

## {{< fa circle-check >}}&ensp;Solution

```r
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + 
  geom_boxplot()
```

:::

###

Good job! This plot uses boxplots to compare the fuel efficiencies of different types of cars. ggplot2 comes with many geom functions that each add a different type of layer to a plot. You'll learn more about boxplots and other geoms in the tutorials that follow.

### Common problems

As you start to run R code, you're likely to run into problems. Don't worry---it happens to everyone. I have been writing R code for years, and every day I still write code that doesn't work! 

Start by carefully comparing the code that you're running to the code in the examples. R is extremely picky, and a misplaced character can make all the difference. Make sure that every `(` is matched with a `)` and every `"` is paired with another `"`. Also pay attention to capitalization; R is case sensitive.

### `+` location

One common problem when creating ggplot2 graphics is to put the `+` in the wrong place: it has to come at the end of a line, not the start. In other words, make sure you haven't accidentally written code like this:

```r
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) 
+ geom_point()
```

### Help

If you're still stuck, try the help. You can get help about any R function by running `?function_name` in a code chunk, e.g. `?geom_point`. Don't worry if the help doesn't seem that helpful --- instead skip down to the bottom of the help page and look for a code example that matches what you're trying to do.

If that doesn't help, carefully read the error message that appears when you run your (non-working) code. Sometimes the answer will be buried there! But when you're new to R, you might not yet know how to understand the error message. Another great tool is Google: try googling the error message, as it's likely someone else has had the same problem, and has gotten help online.

### Exercise 1

Run `ggplot(data = mpg, mapping = aes(cty, hwy))`. What do you see?

::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive editor

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solution

```r
ggplot(data = mpg, mapping = aes(cty, hwy))
```

:::



Good job! A `ggplot` with a `data` and `mapping` arguments has the x-axis and y-axis configured, but it does not display any graphical elements. To add those, we need to add a `geom_` layers.

### Exercise 2 

Make a scatter-plot of `cty` vs `hwy`. From this graph alone, which do you think is larger: a car's fuel efficiency in the city or on the highway?

<!-- TODO: Quiz question  -->

::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive editor

```{webr-r}



```

## {{< fa lightbulb >}}&ensp;Hint

**Hint:** Scatterplots are also called points plots and bubble plots. They use the `point_geom`.

## {{< fa circle-check >}}&ensp;Solution

```r
ggplot(data = mpg, mapping = aes(cty, hwy)) + 
  geom_point()
```

:::

::: {.callout-note appearance="simple" icon=false .question}

In the code above, we used the `mapping` argument in the `ggplot` function. Try moving the `mapping` argument to the `geom_point` layer. That is, use the chunk above to run the following code: 

```{r}
#| echo: true
#| eval: false

ggplot(data = mpg) + 
  geom_point(mapping = aes(cty, hwy))

```

**Which code produces the expected scatter-plot?  (choose more than one) **

```{r}
#| label: q-place aes
#| echo: FALSE
check_question(
  answer = c(
   "Placing the `mapping` argument in the `ggplot()`.",
   "Placing the `mapping` argument in the `geom_point()`.", 
   "Placing the `mapping` argument in the `ggplot()` AND in `geom_point()`."
  ), 
  options = c(
   "Placing the `mapping` argument in the `ggplot()`.",
   "Placing the `mapping` argument in the `geom_point()`.", 
   "Placing the `mapping` argument in the `ggplot()` AND in `geom_point()`.",
   "None of the options produces the expected scatterplot"
  ), 
  type = "checkbox", 
  button_label = "Submit answer", 
  random_answer_order = TRUE,
  q_id = 4,
  right = c("That's correct! All these options produce the expected result. When the `mapping` argument is within the `ggplot()` function, the `geom_` layers 'inherit' the aesthetics. ")
)
```
:::


### Exercise 3

Copy the code in exercise 2, but instead of the  `geom_point()` layer, use `geom_count()` layer. What do you see? How do you explain this result?

::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive editor

```{webr-r}



```

## {{< fa lightbulb >}}&ensp;Hint

**Hint:** `geom_count()`  is similar to `geom_point()`, but it counts the number of observations at each location, then maps that number to the size of the plotted point. It useful when you have discrete data and avoids overplotting.

## {{< fa circle-check >}}&ensp;Solution

```r
ggplot(data = mpg, mapping = aes(cty, hwy)) + 
  geom_count()
```

:::


### Exercise 4

Copy the code in the exercise above and add a `geom_smooth()` layer to the code. Now run the code. What do you find?

::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive editor

```{webr-r}



```

## {{< fa lightbulb >}}&ensp;Hint

**Hint:** `geom_smooth()` adds a smoothed conditional mean to the graph, aiding the eye in seeing patterns in the presence of over-plotting.

## {{< fa circle-check >}}&ensp;Solution

```r
ggplot(data = mpg, mapping = aes(cty, hwy)) + 
  geom_point() + 
  geom_smooth()
```

:::

Excellent work! Notice the warning message in red. It tells us that `geom_smooth()` did not find the argument `formula`, and so it used the default formula, linking the y-axis to the x-axis `y ~ x`.

Now move the `mapping` argument to one of the layers. What do you discover?  

::: {.callout-note appearance="simple" icon=false .question}


**Where can we place the `mapping` argument?  (choose more than one)**

```{r}
#| label: q-placing aes with geom_smooth
#| echo: FALSE
check_question(
  answer = c(
   "The `mapping` argument should go in the `ggplot()`.", 
   "The `mapping` argument should go into `geom_point()` AND  `geom_smooth()`."
  ), 
  options = c(
   "The `mapping` argument should go in the `ggplot()`.",
   "The `mapping` argument should go in the `geom_point()` ONLY.", 
   "The `mapping` argument should go in the `geom_smooth()` ONLY.", 
   "The `mapping` argument should go into `geom_point()` AND  `geom_smooth()`."
  ), 
  type = "checkbox", 
  random_answer_order = FALSE,
  button_label = "Submit answer", 
  q_id = 5,
  right = c("That's correct! When the `mapping` argument is within the `ggplot()` function, all the `geom_` layers 'inherit' the aesthetics. Alternatively, we will need to put the `mapping` argument in all the `geom_` layers.")
)
```
:::

### Exercise 4  

The variable `drv` describes the type of drive train. It is a categorical variable that could have the following values: 

- When it is `f` the vehicle has a front-wheel drive, 
- When it is `r` the vehicle has a rear wheel drive, 
- When it is `4` the vehicle has  a 4 wheel drive car. 

What happens if you make a scatterplot of `class` vs `drv`? Try it. Why is the plot not useful?

::: {.panel-tabset}
## {{< fa code >}}&ensp;Interactive editor

```{webr-r}



```

## {{< fa circle-check >}}&ensp;Solution

```r
ggplot(data = mpg, mapping = aes(x = class, y = drv)) + 
  geom_point()
```

:::
    
###

Since `class` and `drv` are both categorical variables, points  only appear at certain values, and many points overlap each other. You have no idea how many points fall on top of each other at each location. Try replacing `geom_point()` with `geom_count()`. 
Is this a better solution? 

##


```{r}
#| echo: false
#| results: asis
create_buttons("02-aesthetic-mappings.html")
```
