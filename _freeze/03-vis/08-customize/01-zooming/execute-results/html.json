{
  "hash": "6de12e7f2df68e765e2e4d9fe12fe6c2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Zooming\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n    - dplyr\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n```{webr-r}\n#| context: setup\np <- ggplot(diamonds) +\n  geom_boxplot(mapping = aes(x = cut, y = price))\n```\n\nIn the previous tutorials, you learned how to visualize data with graphs. Now let's look at how to customize the look and feel of your graphs. To do that we will need to begin with a graph that we can customize.\n\n### Review 1: Make a plot\n\nIn the chunk below, make a plot that uses boxplots to display the relationship between the `cut` and `price` variables from the `diamonds` dataset.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(diamonds) +\n  geom_boxplot(mapping = aes(x = cut, y = price))\n```\n\n:::\n\n###\n\nGood job! Let's use this plot as a starting point to make a more pleasing plot that displays a clear message.\n\n### Storing plots\n\nSince we want to use this plot again later, let's go ahead and save it.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <- ggplot(diamonds) +\n  geom_boxplot(mapping = aes(x = cut, y = price))\n```\n:::\n\n\n\nNow whenever you call `p`, R will draw your plot. Try it and see.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\np\n```\n\n:::\n\n###\n\nGood job! By the way, have you taken a moment to look at what the plot shows? Let's do that now.\n\n### Surprise?\n\nOur plot shows something surprising: when you group diamonds by `cut`, the worst cut diamonds have the highest median price. It's a little hard to see in the plot, but you can verify it with some data manipulation.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndiamonds |> \n  group_by(cut) |> \n  summarise(median = median(price))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 2\n  cut       median\n  <ord>      <dbl>\n1 Fair       3282 \n2 Good       3050.\n3 Very Good  2648 \n4 Premium    3185 \n5 Ideal      1810 \n```\n\n\n:::\n:::\n\n\n\n### Zoom\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-zooming_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nThe difference between median prices is hard to see in our plot because each group contains distant outliers. \n\nWe can make the difference easier to see by zooming in on the low values of $y$, where the medians are located. There are two ways to zoom with {ggplot2}: with and without clipping.\n\n### Clipping\n\nClipping refers to how R should treat the data that falls outside of the zoomed region. To see its effect, look at these plots. Each zooms in on the region where price is between \\$0 and \\$7,500. \n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-zooming_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![](01-zooming_files/figure-html/unnamed-chunk-5-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n* The plot on the left zooms _by_ clipping. It removes all of the data points that fall outside of the desired region, and then plots the data points that remain.\n* The plot on the right zooms _without_ clipping. You can think of it as drawing the entire graph and then zooming into a certain region. \n\n### `xlim()` and `ylim()`\n\nOf these, zooming by clipping is the easiest to do. To zoom your graph on the $x$ axis, add the function `xlim()` to the plot call. To zoom on the $y$ axis add the function `ylim()`. Each takes a minimum value and a maximum value to zoom to, like this\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsome_plot +\n  xlim(0, 100)\n```\n:::\n\n\n\n### Exercise 1: Clipping\n\nUse `ylim()` to recreate our plot on the left from above. The plot zooms the $y$ axis from 0 to 7,500 by clipping.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\np\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\np + ylim(0, 7500)\n```\n\n:::\n\n###\n\nGood job! Zooming by clipping will sometimes make the graph you want, but in our case it is a very bad idea. Can you tell why?\n\n\n### A caution\n\nZooming by clipping is a bad idea for boxplots. `ylim()` fundamentally changes the information conveyed in the boxplots because it throws out some of the data before drawing the boxplots. Those aren't the medians of the entire data set that we are looking at.\n\nHow then can we zoom without clipping?\n\n### `xlim` and `ylim`\n\nTo zoom without clipping, set the `xlim` and/or `ylim` arguments of your plot's `coord_` function. Each takes a numeric vector of length two (the minimum and maximum values to zoom to).\n\nThis is easy to do if your plot explicitly calls a `coord_` function\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np + coord_flip(ylim = c(0, 7500))\n```\n\n::: {.cell-output-display}\n![](01-zooming_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### `coord_cartesian()`\n\nBut what if your plot doesn't call a `coord_` function? Then your plot is using Cartesian coordinates (the default). You can adjust the limits of your plot without changing the default coordinate system by adding `coord_cartesian()` to your plot.\n\nTry it below. Use `coord_cartesian()` to zoom `p` to the region where price falls between 0 and 7500.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\np\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\np + coord_cartesian(ylim = c(0, 7500))\n```\n\n:::\n\n###\n\nGood job! Now it is much easier to see the differences in the median.\n\n\n### `p`\n\nNotice that our code so far has used `p` to make a plot, but it hasn't changed the plot that is saved inside of `p`. You can run `p` by itself to get the unzoomed plot.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np\n```\n\n::: {.cell-output-display}\n![](01-zooming_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Updating `p`\n\nI like the zooming, so I'm purposefully going to overwrite the plot stored in `p` so that it uses it.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <- p + coord_cartesian(ylim = c(0, 7500))\np\n```\n\n::: {.cell-output-display}\n![](01-zooming_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"02-labels.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "01-zooming_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}