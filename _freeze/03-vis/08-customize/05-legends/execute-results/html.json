{
  "hash": "b65717cac262acab235871ef45f3a7ce",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Legends\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n```{webr-r}\n#| context: setup\nset.seed(1234)\n\np1 <- ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +\n  geom_smooth(mapping = aes(color = cut), se = FALSE) + \n  labs(title = \"Carat size vs. Price\",\n       subtitle = \"Fair cut diamonds tend to be large, but they fetch the lowest prices for most carat sizes.\",\n       caption = \"Data by Hadley Wickham\") +\n  theme_bw()\n\np_cont <- ggplot(data = mpg) + \n  geom_jitter(mapping = aes(x = displ, y = hwy, color = hwy)) +\n  theme_bw()\n\np_legend <- ggplot(data = mpg) + \n  geom_jitter(mapping = aes(x = displ, y = hwy, color = class, fill = hwy), \n              shape = 21, size = 3, stroke = 1) +\n  theme_bw()\n```\n\n### Customizing a legend {.no-hide}\n\nThe last piece of a {ggplot2} graph to customize is the legend. When it comes to legends, you can customize the:\n\n* position of the legend within the graph\n* the \"type\" of the legend, or whether a legend appears at all\n* the title and labels in the legend\n\nCustomizing legends is a little more chaotic than customizing other parts of the graph, because the information that appears in a legend comes from several different places.\n\n### Positions\n\nTo change the position of a legend in a {ggplot2} graph add one of the below to your plot call:\n\n* `+ theme(legend.position = \"bottom\")`\n* `+ theme(legend.position = \"top\")`\n* `+ theme(legend.position = \"left\")`\n* `+ theme(legend.position = \"right\")` (the default)\n\nTry this now. Move the legend in `p_cont` to the bottom of the graph.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\np_cont\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\np_cont + theme(legend.position = \"bottom\")\n```\n\n:::\n\n###\n\nGood job! If you move the legend to the top or bottom of the plot, {ggplot2} will reogranize the orientation of the legend from vertical to horizontal.\n\n### `theme()` vs. themes\n\nTheme functions like `theme_grey()` and `theme_bw()` also adjust the legend position (among all of the other details they orchestrate). So if you use `theme(legend.position = \"bottom\")` in your plots, be sure to add it _after_ any `theme_` functions you call, like this\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = mpg) + \n  geom_jitter(mapping = aes(x = displ, y = hwy, color = hwy)) +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\n\n```\n\n:::\n\nIf you do this, ggplot2 will apply all of the settings of `theme_bw()`, and then overwrite the legend position setting to \"bottom\" (instead of vice versa).\n\n### Types\n\nYou may have noticed that color and fill legends take two forms. If you map color (or fill) to a discrete variable, the legend will look like a standard legend. This is the case for the bottom legend below. \n\nIf you map color (or fill) to a continuous legend, your legend will look like a colorbar. This is the case in the top legend below. The color bar helps convey the continuous nature of the variable.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_legend <- ggplot(data = mpg) + \n  geom_jitter(mapping = aes(x = displ, y = hwy, color = class, fill = hwy), \n              shape = 21, size = 3, stroke = 1) +\n  theme_bw()\n\np_legend\n```\n\n::: {.cell-output-display}\n![](05-legends_files/figure-html/plegend-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n### Changing type\n\nYou can use the `guides()` function to change the type or presence of each legend in the plot. To use `guides()`, type the name of the aesthetic whose legend you want to alter _as and argument name_. Then set it to one of\n\n* `\"legend\"`: to force a legend to appear as a standard legend instead of a colorbar\n* `\"colorbar\"`: to force a legend to appear as a colorbar instead of a standard legend. Note: this can only be used when the legend can be printed as a colorbar (in which case the default will be colorbar).\n* `\"none\"`: to remove the legend entirely. This is useful when you have redundant aesthetic mappings, but it may make your plot indecipherable otherwise.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_legend + guides(fill = \"legend\", color = \"none\")\n```\n\n::: {.cell-output-display}\n![](05-legends_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Exercise: `guides()`\n\nUse `guides()` to remove each legend from the `p_legend` plot.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\np_legend\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\np_legend + guides(fill = \"none\", color = \"none\")\n```\n\n:::\n\n\n### Labels\n\nTo control the labels of a legend, you must turn to the `scale_` functions. Each `scale_` function takes a `name` and a `labels` argument, which it will use to build the legend associated with the scale. The `labels` argument should be a vector of strings that has one string for each label in the default legend.\n\nSo for example, you can adjust the legend of `p1` with\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + \n  scale_color_brewer(\n    name = \"Cut Grade\", \n    labels = c(\"Very Bad\", \"Bad\", \"Mediocre\", \"Nice\", \"Very Nice\")\n  )\n```\n\n::: {.cell-output-display}\n![](05-legends_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### What if?\n\nThis is handy, but it raises a question: what if you haven't invoked a `scale_` function to pass labels to? For example, the graph below relies on the default scales.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-legends_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Default scales\n\nIn this case, you need to identify the default scale used by the plot and then manually add that scale to the plot, setting the labels as you do. \n\nFor example, our plot above relies on the default color scale for a discrete variable, which happens to be `scale_color_discrete()`. If you know this, you can relabel the legend like so:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + \n  scale_color_discrete(\n    name = \"Cut Grade\", \n    labels = c(\"Very Bad\", \"Bad\", \"Mediocre\", \"Nice\", \"Very Nice\")\n  )\n```\n\n::: {.cell-output-display}\n![](05-legends_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n### Scale defaults\n\nAs you can see, it is handy to know which scales a {ggplot2} graph will use by default. Here's a short list.\n\n| aesthetic | variable   | default                    |\n|-----------|------------|----------------------------|\n| x         | continuous | `scale_x_continuous()`     |\n|           | discrete   | `scale_x_discrete()`       |\n| y         | continuous | `scale_y_continuous()`     |\n|           | discrete   | `scale_y_discrete()`       |\n| color     | continuous | `scale_color_continuous()` |\n|           | discrete   | `scale_color_discrete()`   |\n| fill      | continuous | `scale_fill_continuous()`  |\n|           | discrete   | `scale_fill_discrete()`    |\n| size      | continuous | `scale_size()`             |\n| shape     | discrete   | `scale_shape()`            |\n\n: {tbl-colwidths=\"[33, 33, 33]\" .striped .hover .table-sm}\n\n\n### Exercise: Legends\n\nUse the list of scale defaults above to relabel the legend in `p_cont`. The legend should have the title \"Highway MPG\". Also place the legend at the top of the plot.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\np_cont\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\np_cont + \n  scale_color_continuous(name = \"Highway MPG\") + \n  theme(legend.position = \"top\")\n\n# This works too\np_cont + \n  labs(color = \"Highway MPG\") + \n  theme(legend.position = \"top\")\n```\n\n:::\n\n###\n\nGood job!\n\n\n### Axis labels\n\nIn {ggplot2}, the axes are the \"legends\" associated with the $x$ and $y$ aesthetics. As a result, you can control axis titles and labels in the same way as you control legend titles and labels:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + \n  scale_x_continuous(\n    name = \"Carat Size\", \n    labels = c(\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\")\n  )\n```\n\n::: {.cell-output-display}\n![](05-legends_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"06-quiz.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "05-legends_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}