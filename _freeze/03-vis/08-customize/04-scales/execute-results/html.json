{
  "hash": "ea24d79751a14a5dd0c2126e31dea5ae",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Scales\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n    - RColorBrewer\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n```{webr-r}\n#| context: setup\np1 <- ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +\n  geom_smooth(mapping = aes(color = cut), se = FALSE) + \n  labs(title = \"Carat size vs. Price\",\n       subtitle = \"Fair cut diamonds tend to be large, but they fetch the lowest prices for most carat sizes.\",\n       caption = \"Data by Hadley Wickham\") +\n  theme_bw()\n\np_cont <- ggplot(data = mpg) + \n  geom_jitter(mapping = aes(x = displ, y = hwy, color = hwy)) +\n  theme_bw()\n```\n\n### What is a scale? {.no-hide}\n\nEvery time you map an aesthetic to a variable, ggplot2 relies on a _scale_ to select the specific colors, sizes, or shapes to use for the values of your variable. \n\nA scale is an R function that works like a mathematical function; it maps each value in a data space to a level in an aesthetic space. But it may be easier to think of a scale as a \"palette.\" When you give your graph a color scale, you give it a palette of colors to use.\n\n### Using scales\n\n{ggplot2} chooses a pleasing set of scales to use whenever you make a graph. You can change or customize these scales by adding a scale function to your plot call. \n\nFor example, the code below plots `p1` in greyscale instead of the default colors.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + scale_color_grey()\n```\n\n::: {.cell-output-display}\n![](04-scales_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n### A second example\n\nYou can add scales for every aesthetic mapping, including the $x$ and $y$ mappings (the code below log transforms the x and y axes). \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 +\n  scale_x_log10() + \n  scale_y_log10()\n```\n\n::: {.cell-output-display}\n![](04-scales_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n{ggplot2} supplies over 50 scales to use. This may seem overwhelming, but the scales are organized according to an intuitive naming convention.\n\n### Naming convention\n\n{ggplot2} scale functions follow a naming convention. Each function name contains the same three elements in order, separated by underscores:\n\n* The prefix `scale` \n* the name of an aesthetic, which the scale adjusts (e.g. `color`, `fill`, `size`)\n* a unique label for the scale (e.g. `grey`, `brewer`, `manual`)\n\n`scale_shape_manual()` and `scale_x_continuous()` are examples of the naming scheme.\n\nYou can see the complete list of scale names at [http://ggplot2.tidyverse.org/reference/](http://ggplot2.tidyverse.org/reference/). In this tutorial, we will focus on scales that work with the color aesthetic.\n\n### Discrete vs. continuous\n\nScales specialize in either _discrete_ variables or _continuous_ variables. In other words, you would use a different set of scales to map a discrete variable, like diamond clarity, than you would use to map a continuous variable, like diamond price.\n\n### `scale_color_brewer()`\n\nOne of the most useful color palettes for discrete variables is `scale_color_brewer()` (`scale_fill_brewer()` if you are working with fill). Run the code below to see the effect of the scale.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\np1 + scale_color_brewer()\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\n\n```\n\n:::\n\n###\n\nGood job! `scale_color_brewer()` applies a color palette from the {RColorBrewer} package, a package that specializes in attractive color palettes.\n\n\n### {RColorBrewer}\n\nThe {RColorBrewer} package contains a variety of palettes developed by Cynthia Brewer. Each palette is designed to look pleasing as well as to differentiate between the values represented by the palette. You can learn more about the color brewer project at [colorbrewer2.org](http://colorbrewer2.org).\n\nAltogether, the {RColorBrewer} package contains 35 palettes. You can see each palette and its name by running `RColorBrewer::display.brewer.all()`. Try it below.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n#| fig-width: 6\n#| fig-height: 8\nRColorBrewer::display.brewer.all()\n\n\n```\n\n:::\n\n###\n\nGood job! Our graph above used the Blues palette (the default).\n\n\n### Brewer palettes\n\nBy default, `scale_color_brewer()` will use the \"Blues\" palette from the {RColorBrewer} package. To use a different {RColorBrewer} palette, set the palette argument of `scale_color_brewer()` to one of the {RColorBrewer} palette names, surrounded by quotation marks, e.g.\n\n\n\n::: {.cell layout-align=\"center\" warnings='false'}\n\n```{.r .cell-code}\np1 + scale_color_brewer(palette = \"Purples\")\n```\n\n::: {.cell-output-display}\n![](04-scales_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Exercise: `scale_color_brewer()`\n\nRecreate the graph below, which uses a different palette from the {RColorBrewer} package.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-scales_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\np1\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\np1 + scale_color_brewer(palette = \"Spectral\")\n```\n\n:::\n\n###\n\nGood job! `scale_color_brewer()` is one of the most useful functions for customizing colors in ggplot2 because it does for you the hard work of selecting a pleasing combination of colors. If you'd like to select individual colors yourself, try the `scale_color_manual()` function.\n\n\n### Continuous colors\n\n`scale_color_brewer()` works with discrete variables, but what if your plot maps color to a continuous variable?\n\nSince we do not have a plot that applies color to a continuous variable, let's make one. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_cont <- ggplot(data = mpg) + \n  geom_jitter(mapping = aes(x = displ, y = hwy, color = hwy)) +\n  theme_bw()\n\np_cont\n```\n\n::: {.cell-output-display}\n![](04-scales_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n### Discrete vs. continuous in action\n\nIf we apply `scale_color_brewer()` to our new plot, we get an error message that confirms what you know: you cannot use a scale that is built for discrete variables to customize the mapping to a continuous variable.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_cont + scale_color_brewer()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `scale_color_brewer()`:\n! Continuous values supplied to discrete scale.\nâ„¹ Example values: 29, 29, 31, 30, and 26\n```\n\n\n:::\n:::\n\n\n\n### Distiller\n\nLuckily, `scale_color_brewer()` has a comes with a continuous analogue named `scale_color_distiller()` (also `scale_fill_distiller()`). \n\nUse `scale_color_distiller()` just as you would `scale_color_brewer()`. `scale_color_distiller()` will take any {RColorBrewer} palette, and interpolate between colors as necessary to provide an entire continuous range of colors.\n\nSo for example, we could reuse the Spectral palette in our continuous plot\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np_cont + scale_color_distiller(palette = \"Spectral\")\n```\n\n::: {.cell-output-display}\n![](04-scales_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n### Exercise: `scale_color_distiller()`\n\nRecreate the graph below, which uses a different palette from the {RColorBrewer} package.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\np_cont\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\np_cont + scale_color_distiller(palette = \"BrBG\")\n```\n\n:::\n\n###\n\nGood job! {ggplot2} also supplies `scale_color_gradient()`, `scale_color_gradient2()`, and `scale_color_gradientn()`, which you can use to  construct gradients manually between 2, 3, and n colors.\n\n### viridis\n\nThe [{viridis} package](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html) contains a collection of very good looking color palettes for both discrete and continuous variables. Each palette is designed to show the gradation of continuous values in an attractive, and perceptually uniform way (no range of values appears more important than another). As a bonus, the palettes are both colorblind and black-and-white printer friendly!\n\nTo add a continuous viridis palette, use `scale_color_viridis_c()` or `scale_fill_viridis_c()`; for a discrete viridis palette, use `scale_color_viridis_d()` or `scale_fill_viridis_d()`, both of which come in the {ggplot2} package.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np1 + scale_color_viridis_d()\n```\n\n::: {.cell-output-display}\n![](04-scales_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=70%}\n:::\n\n```{.r .cell-code}\np_cont + scale_color_viridis_c()\n```\n\n::: {.cell-output-display}\n![](04-scales_files/figure-html/unnamed-chunk-9-2.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n### viridis options\n\nAltogether, the viridis package comes with [eight color palettes](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html#the-color-scales), named `viridis`, `magma`, `plasma`, `inferno`, `cividis`, `mako`, `rocket`, and `turbo`.\n\n![](img/viridis.png){width=80%}\n\nTry each option with `p_cont` below. Determine which is the default.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\np_cont + scale_color_viridis_c(option = \"turbo\")\n\n\n```\n\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\np_cont + scale_color_viridis_c(option = \"viridis\")\n```\n\n:::\n\n###\n\nGood job! `viridis` is the default if you do not select a scale.\n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"05-legends.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "04-scales_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}