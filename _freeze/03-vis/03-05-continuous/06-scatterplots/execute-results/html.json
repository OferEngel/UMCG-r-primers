{
  "hash": "dabeefe0b63d251c4fd22a43cca170a9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Scatterplots\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n    - dplyr\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n\n### Review 1: `geom_point()` {.no-hide}\n\nIn [Visualization Basics](/basics/01-visualization-basics/), you learned how to make a scatterplot with `geom_point()`.\n\nThe code below summarizes the mpg data set and begins to plot the results. Finish the plot with `geom_point()`. Put `mean_cty` on the $x$ axis and `mean_hwy` on the $y$ axis.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nmpg |> \n  group_by(class) |> \n  summarize(mean_cty = mean(cty), mean_hwy = mean(hwy)) |> \n  ggplot()\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nmpg |> \n  group_by(class) |> \n  summarize(mean_cty = mean(cty), mean_hwy = mean(hwy)) |> \n  ggplot() +\n    geom_point(mapping = aes(x = mean_cty, y = mean_hwy))\n```\n\n:::\n\n###\n\nGood job! It can be tricky to remember when to use `|>` and when to use `+`. Use `|>` to add one complete step to a pipe of code. Use `+` to add one more line to a {ggplot2} call.\n\n### `geom_text()` and `geom_label()`\n\n`geom_text()` and `geom_label()` create scatterplots that use words instead of points to display data. Each requires the extra aesthetic `label`, which you should map to a variable that contains text to display for each observation.\n\nConvert the plot below from `geom_point()` to `geom_text()` and map the `label` aesthetic to the `class` variable. When you are finished convert the code to `geom_label()` and rerun the plot. Can you spot the difference?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nmpg |> \n  group_by(class) |> \n  summarize(mean_cty = mean(cty), mean_hwy = mean(hwy)) |> \n  ggplot() +\n    geom_point(mapping = aes(x = mean_cty, y = mean_hwy))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nmpg |> \n  group_by(class) |> \n  summarize(mean_cty = mean(cty), mean_hwy = mean(hwy)) |> \n  ggplot() +\n    geom_text(mapping = aes(x = mean_cty, y = mean_hwy, label = class))\n\nmpg |> \n  group_by(class) |> \n  summarize(mean_cty = mean(cty), mean_hwy = mean(hwy)) |> \n  ggplot() +\n    geom_label(mapping = aes(x = mean_cty, y = mean_hwy, label = class))\n```\n\n:::\n\n###\n\nGood job! `geom_text()` replaces each point with a piece of text supplied by the label aesthetic. `geom_label()` replaces each point with a textbox. Notice that some pieces of text overlap each other, and others run off the page. We'll soon look at a way to fix this.\n\n### `geom_smooth()`\n\nIn [Visualization Basics](/basics/01-visualization-basics/), you met `geom_smooth()`, which provides a summarized version of a scatterplot.\n\n`geom_smooth()` uses a model to fit a smoothed line to the data and then visualizes the results. By default, `geom_smooth()` fits a loess smooth to data sets with less than 1,000 observations, and a generalized additive model to data sets with more than 1,000 observations. \n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![](06-scatterplots_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![](06-scatterplots_files/figure-html/unnamed-chunk-2-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n### `method`\n\nYou can use the `method` parameter of `geom_smooth()` to fit and display other types of model lines. To do this, pass `method` the name of an R modeling function for `geom_smooth()` to use, such as `\"lm\"` (for linear models) or `\"glm\"` (for generalized linear models).\n\nIn the code below, use `geom_smooth()` to draw the linear model line that fits the data.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nmpg |> \n  group_by(class) |> \n  summarize(mean_cty = mean(cty), mean_hwy = mean(hwy)) |> \n  ggplot() \n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nmpg |> \n  group_by(class) |> \n  summarize(mean_cty = mean(cty), mean_hwy = mean(hwy)) |> \n  ggplot() +\n    geom_smooth(mapping = aes(x = mean_cty, y = mean_hwy), method = \"lm\")\n```\n\n:::\n\n###\n\nGood job! Now let's look at a way to make `geom_smooth()` much more useful.\n\n##\n\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"07-layers.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "06-scatterplots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}