{
  "hash": "97cefdbe68c0c0079506999cbd9014e7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Line graphs\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n    - dplyr\n    - forcats\n    - gapminder\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n\n```{webr-r}\n#| context: setup\nasia <- \n  gapminder |> \n  filter(country %in% c(\"China\", \"Korea, Dem. Rep.\", \"Korea, Rep.\", \"Japan\")) |> \n  mutate(country = fct_recode(country, \"North Korea\" = \"Korea, Dem. Rep.\", \"South Korea\" = \"Korea, Rep.\"))\n```\n\n\nA **line graph** displays a functional relationship between two continuous variables. A **map**  displays spatial data. The two may seem different, but they are made in similar ways. This tutorial will examine them both.\n\nIn this tutorial, you'll learn how to:\n\n* Make new types of line plots with `geom_step()`, `geom_area()`, `geom_path()`, and `geom_polygon()`\n* Avoid \"whipsawing\" with the group aesthetic\n* Find and plot map data with `geom_sf()`\n* Transform a coordinate system into a map projection with `coord_sf()`\n\n\n### Line graph vs. scatterplot {.no-hide}\n\nLike scatterplots, line graphs display the relationship between two continuous variables. However, unlike scatterplots, line graphs expect the variables to have a _functional_ relationship, where each value of $x$ is associated with only one value of $y$.\n\nFor example, in the plot below, there is only one value of `unemploy` for each value of date. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](09-line-graphs_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n### `geom_line()`\n\nUse the `geom_line()` function to make line graphs. Like `geom_point()`, it requires `x` and `y` aesthetics. \n\nUse `geom_line()` in the chunk below to recreate the graph above. The graph uses the `economics` dataset that comes with {ggplot2} and maps the `date` and `unemploy` variables to the $x$ and $y$ axes. See [Visualization Basics](basics/01-visualization-basics/) if you are completely stuck.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(economics) +\n  geom_line(mapping = aes(x = date, y = unemploy))\n```\n\n:::\n\n###\n\nGood job! The graph shows the number of unemployed people in the US (in thousands) from 1967 to 2015. Now let's look at a richer dataset.\n\n\n### `asia`\n\nI've used [the {gapminder} package](https://jennybc.github.io/gapminder/) to assemble a new data set named `asia` to plot. Among other things, `asia` contains the GDP per capita of four countries from 1952 to 2007.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nasia\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 6\n   country continent  year lifeExp        pop gdpPercap\n   <fct>   <fct>     <int>   <dbl>      <int>     <dbl>\n 1 China   Asia       1952    44    556263527      400.\n 2 China   Asia       1957    50.5  637408000      576.\n 3 China   Asia       1962    44.5  665770000      488.\n 4 China   Asia       1967    58.4  754550000      613.\n 5 China   Asia       1972    63.1  862030000      677.\n 6 China   Asia       1977    64.0  943455000      741.\n 7 China   Asia       1982    65.5 1000281000      962.\n 8 China   Asia       1987    67.3 1084035000     1379.\n 9 China   Asia       1992    68.7 1164970000     1656.\n10 China   Asia       1997    70.4 1230075000     2289.\n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n\n\n### Whipsawing\n\nHowever, when we plot the `asia` data we get an odd looking graph. The line seems to \"whipsaw\" up and down. Whipsawing is one of the most encountered challenges with line graphs.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(asia) +\n  geom_line(mapping = aes(x = year, y = gdpPercap))\n```\n\n::: {.cell-output-display}\n![](09-line-graphs_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n### Review 1: Whipsawing\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**What does whipsawing indicate?**\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_41964\" onsubmit=\"return validate_form_41964()\" method=\"post\">\n<input type=\"radio\" name=\"answer_41964\" id=\"answer_41964_1\" value=\"There is a lot of volatility in the data.\"/>\n<label>There is a lot of volatility in the data.</label>\n<br/>\n<input type=\"radio\" name=\"answer_41964\" id=\"answer_41964_2\" value=\"The graph should be plotted in polar coordinates.\"/>\n<label>The graph should be plotted in polar coordinates.</label>\n<br/>\n<input type=\"radio\" name=\"answer_41964\" id=\"answer_41964_3\" value=\"The data contains rounding errors.\"/>\n<label>The data contains rounding errors.</label>\n<br/>\n<input type=\"radio\" name=\"answer_41964\" id=\"answer_41964_4\" value=\"We are trying to plot more than one line with a single line.\"/>\n<label>We are trying to plot more than one line with a single line.</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_41964\"></div>\n</form>\n<script>function validate_form_41964() {var x, text; var x = document.forms['form_41964']['answer_41964'].value;if (x == 'We are trying to plot more than one line with a single line.'){text = 'Correct! As a result, our single line needs to connect multiple points for each x value before moving to the next x value.';} else {text = 'I have a different answer';} document.getElementById('result_41964').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_41964').innerText == 'Correct! As a result, our single line needs to connect multiple points for each x value before moving to the next x value.';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n:::\n\n\n### Multiple lines\n\nRedraw our graph as a scatterplot. Can you spot more than one \"line\" in the data?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(asia) +\n  geom_point(mapping = aes(x = year, y = gdpPercap))\n```\n\n:::\n\n###\n\nGood job! There are actually four lines in the plot. One for each country: China, Japan, North Korea, and South Korea.\n\n### `group`\n\nMany geoms, like lines, boxplots, and smooth lines, use a single object to display the entire dataset. You can use the _group_ aesthetic to instruct these geoms to draw separate objects for different groups of observations.\n\nFor example, in the code below, you can map `group` to the grouping variable `country` to create a separate line for each country. Try it. Be sure to place the group mapping inside of `aes()`.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(asia) +\n  geom_line(mapping = aes(x = year, y = gdpPercap))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(asia) +\n  geom_line(mapping = aes(x = year, y = gdpPercap, group = country))\n```\n\n:::\n\n###\n\nGood job! We now have a separate line for each country. Unfortunately, we cannot tell what the countries are: the `group` aesthetic does not supply a legend. Let's look at how to fix that.\n\n### Aesthetics\n\nYou do not have to rely on the `group` aesthetic to perform a grouping. {ggplot2} will automatically group a monolithic geom whenever you map an aesthetic to a categorical variable. \n\nSo for example, the code below performs an implied grouping. And since we use the `color` aesthetic, the plot includes the color legend.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(asia) +\n  geom_line(mapping = aes(x = year, y = gdpPercap, color = country))\n```\n\n::: {.cell-output-display}\n![](09-line-graphs_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n### `linetype` \n\nLines recognize a useful aesthetic that we haven't encountered before, `linetype`. Change `color` to `linetype` below and inspect the results. What happens if you map _both_ a `color` and a `linetype` to country?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(asia) +\n  geom_line(mapping = aes(x = year, y = gdpPercap, color = country))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(asia) +\n  geom_line(mapping = aes(x = year, y = gdpPercap, linetype = country, color = country))\n```\n\n:::\n\n###\n\nGood job! If you map two aesthetics to the same variable, {ggplot2} will combine their legends. Supplementing `color` with `linetype` is a good idea if you might print your line chart in black and white.\n\n### Exercise 1: Life Expectancy\n\nUse what you've learned to plot the life expectancy of each country over time. Life expectancy is saved in the `asia` data set as `lifeExp`. Which country has the highest life expectancy? The lowest?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(asia) +\n  geom_line(mapping = aes(x = year, y = lifeExp, color = country, linetype = country))\n```\n\n:::\n\n###\n\nGood job! Japan has the highest life expectancy and North Korea the worst, but we can see that things haven't always been this way. Now let's look at some other ways to display the same information.\n\n\n##\n\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"02-similar-geoms.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "09-line-graphs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}