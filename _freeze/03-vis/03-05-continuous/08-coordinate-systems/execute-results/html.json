{
  "hash": "d1f7d7429d4873da7023f06a8eee0100",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Coordinate systems\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n\n### `coord_flip()` {.no-hide}\n\nOne way to customize a scatterplot is to plot it in a new coordinate system. {ggplot2} provides several helper functions that change the coordinate system of a plot. You've already seen one of these in action in the [boxplots tutorial](/visualize-data/04-boxplots/): `coord_flip()` flips the $x$ and $y$ axes of a plot.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(x = class, y = hwy)) +\n  geom_boxplot(outlier.alpha = 0) +\n  geom_jitter(width = 0) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](08-coordinate-systems_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n### The coord functions\n\nAltogether, {ggplot2} comes with several `coord` functions:\n\n* `coord_cartesian()`: (the default) Cartesian coordinates\n* `coord_fixed()`: Cartesian coordinates that maintain a fixed aspect ratio as the plot window is resized\n* `coord_flip()`: Cartesian coordinates with x and y axes flipped\n* `coord_sf()`: cartographic projections for plotting maps\n* `coord_polar()` and `coord_radial()`: polar and radial coordinates for round plots like pie charts\n* `coord_trans()`: transformed Cartesian coordinates\n\nBy default, {ggplot2} will draw a plot in Cartesian coordinates unless you add one of the functions above to the plot code.\n\n### `coord_polar()`\n\nYou use each coord function like you use `coord_flip()`, by adding it to a {ggplot2} call.\n\nSo for example, you could add `coord_polar()` to a plot to make a graph that uses polar coordinates.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut, fill = cut), width = 1) \n```\n\n::: {.cell-output-display}\n![](08-coordinate-systems_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=80%}\n:::\n\n```{.r .cell-code}\nlast_plot() +\n  coord_polar()\n```\n\n::: {.cell-output-display}\n![](08-coordinate-systems_files/figure-html/unnamed-chunk-3-2.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n### Coordinate systems and scatterplots\n\nHow can a coordinate system improve a scatterplot? \n\nConsider, the scatterplot below. It shows a strong relationship between the carat size of a diamond and its price. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-coordinate-systems_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nHowever, the relationship does not appear linear. It appears to have the form $y = x^{n}$, a common relationship found in nature. You can estimate the $n$ by replotting the data in a _log-log plot_.\n\n### log-log plots\n\nLog-log plots graph the log of $x$ vs. the log of $y$, which has a valuable visual effect. If you log both sides of a relationship like\n\n$$\ny = x^{n}\n$$\n\nYou get a linear relationship with slope $n$:\n\n$$\n\\begin{aligned}\n\\log(y) &= \\log(x^{n}) \\\\\n\\log(y) &= n \\times \\log(x)\n\\end{aligned}\n$$\n\nIn other words, log-log plots unbend power relationships into straight lines. Moreover, they display $n$ as the slope of the straight line, which is reasonably easy to estimate.\n\nTry this by using the diamonds dataset to plot `log(carat)` on the x-axis and `log(price)` on the y-axis:\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_point(mapping = aes(x = log(carat), y = log(price))) \n```\n\n:::\n\n###\n\nGood job! Now let's look at how you can do the same transformation, and others as well with a coord function.\n\n### `coord_trans()`\n\n`coord_trans()` provides a second way to do the same transformation, or similar transformations.\n\nTo use `coord_trans()` give it an $x$ and/or a $y$ argument. Set each to the name of an R function surrounded by quotation marks. `coord_trans()` will use the function to transform the specified axis before plotting the raw data. \n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_point(mapping = aes(x = carat, y = price)) +\n  coord_trans(x = \"log\", y = \"log\")\n\n\n```\n\n:::\n\n\n### Recap\n\nScatterplots are one of the most useful types of plots for data science. You will have many chances to use `geom_point()`, `geom_smooth()`, and `geom_label_repel()` in your day-to-day work.\n\nHowever, this tutor introduced important two concepts that apply to more than just scatterplots:\n\n* You can add **multiple layers** to any plot that you make with {ggplot2}\n* You can add a different **coordinate system** to any plot that you make with {ggplot2}\n\n\n##\n\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "08-coordinate-systems_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}