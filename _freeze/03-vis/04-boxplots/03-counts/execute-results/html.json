{
  "hash": "02b312022c674be2ec9e96ad23ecbcd8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Counts\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n    - dplyr\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n### `geom_count()` {.no-hide}\n\nBoxplots provide an efficient way to explore the interaction of a continuous variable and a categorical variable. But what if you have two categorical variables?\n\nYou can see how observations are distributed across two categorical variables with `geom_count()`. `geom_count()` draws a point at each combination of values from the two variables. The size of the point is mapped to the number of observations with this combination of values. Rare combinations will have small points, frequent combinations will have large points.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-counts_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Exercise 8: Count plots\n\nUse `geom_count()` to plot the interaction of the `cut` and `clarity` variables in the `diamonds` data set.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_count(mapping = aes(x = cut, y = clarity))\n```\n\n:::\n\n\n### `count()`\n\nYou can use the `count()` function in the {dplyr} package to compute the count values displayed by `geom_count()`. To use `count()`, pass it a data frame and then the names of zero or more variables in the data frame. `count()` will return a new table that lists how many observations occur with each possible combination of the listed variables.\n\nSo for example, the code below returns the counts that you visualized in Exercise 8.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndiamonds |> \n  count(cut, clarity)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 3\n   cut   clarity     n\n   <ord> <ord>   <int>\n 1 Fair  I1        210\n 2 Fair  SI2       466\n 3 Fair  SI1       408\n 4 Fair  VS2       261\n 5 Fair  VS1       170\n 6 Fair  VVS2       69\n 7 Fair  VVS1       17\n 8 Fair  IF          9\n 9 Good  I1         96\n10 Good  SI2      1081\n# ℹ 30 more rows\n```\n\n\n:::\n:::\n\n\n\n### Heat maps\n\nHeat maps provide a second way to visualize the relationship between two categorical variables. They work like count plots, but use a fill color instead of a point size, to display the number of observations in each combination.\n\n### How to make a heat map\n\n{ggplot2} does not provide a geom function for heat maps, but you can construct a heat map by plotting the results of `count()` with `geom_tile()`. \n\nTo do this, set the x and y aesthetics of `geom_tile()` to the variables that you pass to `count()`. Then map the fill aesthetic to the `n` variable computed by `count()`. The plot below displays the same counts as the plot in Exercise 8.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndiamonds |> \n  count(cut, clarity) |> \n  ggplot() +\n    geom_tile(mapping = aes(x = cut, y = clarity, fill = n))\n```\n\n::: {.cell-output-display}\n![](03-counts_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Exercise 9: Make a heat map\n\nPractice the method above by re-creating the heat map below.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-counts_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\ndiamonds |> \n  count(color, cut) |> \n  ggplot(mapping = aes(x = color, y = cut)) +\n    geom_tile(mapping = aes(fill = n))\n```\n\n:::\n\n###\n\nGood job!\n\n### Recap\n\nBoxplots, dotplots and violin plots provide an easy way to look for relationships between a continuous variable and a categorical variable. Violin plots convey a lot of information quickly, but boxplots have a head start in popularity---they were easy to use when statisticians had to draw graphs by hand.\n\nIn any of these graphs, look for distributions, ranges, medians, skewness or anything else that catches your eye to change in an unusual way from distribution to distribution. Often, you can make patterns even more revealing with the `fct_reorder()` function from the {forcats} package (we'll wait to learn about {forcats} until after you study factors).\n\nCount plots and heat maps help you see how observations are distributed across the interactions of two categorical variables.\n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "03-counts_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}