{
  "hash": "be80de2a35372e3eeb02da576b01597e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Boxplots\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n\n**Boxplots** display the relationship between a continuous variable and a categorical variable. **Count** plots display the relationship between two categorical variables. In this tutorial, you will learn how to use both. You will learn how to:\n\n* Make and interpret boxplots\n* Rotate boxplots by flipping the coordinate system of your plot\n* Use *violin* plots and *dotplots*, two geoms that are similar to boxplots\n* Make and interpret count plots\n\n\n### Introduction {.no-hide}\n\nWatch [this video](https://vimeo.com/222358034):\n\n\n\n```{=html}\n<div class=\"ratio ratio-4x3\">\n<iframe src=\"https://player.vimeo.com/video/222358034\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div>\n```\n\n\n\n### Exercise 1 - Boxplots\n\n![](img/box-png.png){width=100%}\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**Which of the sub-plots accurately describes the data above with a boxplot**\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_1\" onsubmit=\"return validate_form_1()\" method=\"post\">\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_1\" value=\"A\"/>\n<label>A</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_2\" value=\"B\"/>\n<label>B</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_3\" value=\"C\"/>\n<label>C</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_1\"></div>\n</form>\n<script>function validate_form_1() {var x, text; var x = document.forms['form_1']['answer_1'].value;if (x == 'C'){text = 'Correct!';} else {text = 'Good try, but this is tricky. With A, the middle of the box is near the middle of the range of the data, but it is not the median. The median depends on how many observations are on each side of the value. With B, the box extends the entire range of the data. This could be a useful plot, ggplot2 calls it a crossbar, but it is not a boxplot';} document.getElementById('result_1').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_1').innerText == 'Correct!';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n:::\n\n\n### How to make a boxplot\n\nTo make a boxplot with {ggplot2}, add `geom_boxplot()` to the [ggplot2 template](/01-basics/01-visualization-basics/01-code-template.qmd). For example, the code below uses boxplots to display the relationship between the `class` and `hwy` variables in the `mpg` dataset, which comes with {ggplot2}. \n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = mpg) +\n  geom_boxplot(mapping = aes(x = class, y = hwy))\n\n\n```\n\n:::\n\n\n\n### Categorical and continuous\n\n`geom_boxplot()` expects one x- or y-axes to the continuous and one to be categorical. For example, here `class` is categorical. `geom_boxplot()` will automatically plot a separate boxplot for each value of $x$. This makes it easy to compare the distributions of points with different values of $x$.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-boxplots_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Exercise 2: Interpretation\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-boxplots_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**Which class of car has the lowest median highway fuel efficiency (`hwy` value)?**\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_2\" onsubmit=\"return validate_form_2()\" method=\"post\">\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_1\" value=\"2seater\"/>\n<label>2seater</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_2\" value=\"compact\"/>\n<label>compact</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_3\" value=\"midsize\"/>\n<label>midsize</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_4\" value=\"minivan\"/>\n<label>minivan</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_5\" value=\"pickup\"/>\n<label>pickup</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_6\" value=\"subcompact\"/>\n<label>subcompact</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_7\" value=\"suv\"/>\n<label>suv</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_2\"></div>\n</form>\n<script>function validate_form_2() {var x, text; var x = document.forms['form_2']['answer_2'].value;if (x == 'pickup'){text = 'Correct!';} else {text = 'I have a different answer';} document.getElementById('result_2').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2;res1 = document.getElementById('result_1').innerText == 'Correct!'; res2 = document.getElementById('result_2').innerText == 'Correct!';text = res1 + res2;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n:::\n\n\n### Exercise 3: Make a boxplot\n\nRecreate the boxplot below with the diamonds data set.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-boxplots_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_boxplot(mapping = aes(x = cut, y = price))\n```\n\n:::\n\n###\n\nDo you notice how many outliers appear in the plot? The boxplot algorithm can identify many outliers if your data is big, perhaps too many. Let's look at ways to suppress the appearance of outliers in your plot.\n\n### Outliers\n\nYou can change how outliers look in your boxplot with the parameters `outlier.color`, `outlier.fill`, `outlier.shape`, `outlier.size`, `outlier.stroke`, and `outlier.alpha` (`outlier.shape` takes a number from 1 to 25). \n\nUnfortunately, you can't tell `geom_boxplot()` to ignore outliers completely, but you can make outliers disappear by setting `outlier.alpha = 0`. Try it in the plot below.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_boxplot(mapping = aes(x = cut, y = price), outlier.shape = 24, \n               outlier.fill = \"white\", outlier.stroke = 0.25)\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_boxplot(mapping = aes(x = cut, y = price), outlier.alpha = 0)\n```\n\n:::\n\n\n### Aesthetics\n\nBoxplots recognize the following aesthetics: _alpha_, _color_, _fill_, _group_, _linetype_, _shape_, _size_, and _weight_.\n\nOf these _group_ can be the most useful. Consider the plot below. It uses a continuous variable on the $x$ axis. As a result, `geom_boxplot()` is not sure how to split the data into categories: it lumps all of the data into a single boxplot. The result reveals little about the relationship between carat and price.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-boxplots_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nIn the next sections, we'll use _group_ to make a more informative plot.\n\n### How to \"cut\" a continuous variable\n\n{ggplot2} provides three helper functions that you can use to split a continuous variable into categories. Each takes a continuous vector and returns a categorical vector that assigns each value to a group. For example, `cut_interval()` bins a vector into `n` equal length bins.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncontinuous_vector <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\ncontinuous_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncut_interval(continuous_vector, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] [1,4]  [1,4]  [1,4]  [1,4]  (4,7]  (4,7]  (4,7]  (7,10] (7,10] (7,10]\nLevels: [1,4] (4,7] (7,10]\n```\n\n\n:::\n:::\n\n\n\n### The cut functions\n\nThe three cut functions are\n\n* `cut_interval()` which makes `n` groups with equal range\n* `cut_number()` which makes `n` groups with (approximately) equal numbers of observations\n* `cut_width()` which makes groups with width `width`\n\nUse one of three functions below to bin `continuous_vector` into groups of `width = 2`.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\ncontinuous_vector <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\ncontinuous_vector\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\ncut_width(continuous_vector, width = 2)\n```\n\n:::\n\n###\n\nGood job! Now let's apply the cut functions to our graph.\n\n### Exercise 4: Apply a cut function\n\nWhen you set the `group` aesthetic of a boxplot, `geom_boxplot()` will draw a separate boxplot for each collection of observations that have the same value of whichever vector you map to `group`. \n\nThis means we can split our `carat` plot by mapping `group` to the output of a cut function, as in the code below. Study the code, then modify it to create a separate boxplot for each 0.25 wide interval of `carat`.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_boxplot(mapping = aes(x = carat, y = price, group = cut_interval(carat, n = 2)))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_boxplot(mapping = aes(x = carat, y = price, group = cut_width(carat, width = 0.25)))\n```\n\n:::\n\n###\n\nGood job! You can now see a relationship between price and carat. You could also make a scatterplot of these variables, but in this case, it would be a black mass of 54,000 data points.\n\n### Horizontal boxplots\n\nSo far, we've been using categorical variables in the $x$ axis, which creates vertical boxplots. But what if you'd like to make horizontal boxplots, like in the plot below?\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-boxplots_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nYou can do this in two ways:\n\n- Swap the `x` and `y` aesthetics\n- Adding `+ coord_flip()` to your plot call\n\n\n\n### Exercise 5: Horizontal boxplots\n\nModify the code below to make a horizontal boxplot by switching the `x = ` and `y = ` values:\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = mpg) +\n  geom_boxplot(mapping = aes(x = class, y = hwy))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = mpg) +\n  geom_boxplot(mapping = aes(x = hwy, y = class))\n```\n\n:::\n\n\\ \n\nModify the code below to make a horizontal boxplot by adding `coord_flip()`:\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = mpg) +\n  geom_boxplot(mapping = aes(x = class, y = hwy))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = mpg) +\n  geom_boxplot(mapping = aes(x = class, y = hwy)) +\n  coord_flip()\n```\n\n:::\n\n###\n\nGood job!\n\n`coord_flip()` is an example of a new coordinate system. You'll learn much more about {ggplot2} coordinate systems in a later tutorial.\n\nI prefer to switch the `x` and `y` aesthetics instead of flipping the coordinates because it makes working with themes and legends a lot easier.\n\n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"02-similar-geoms.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "01-boxplots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}