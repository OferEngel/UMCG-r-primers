{
  "hash": "1ecc76d186d28f5f40ed6925414d479a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Position adjustments\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n### Positions {.no-hide}\n\nIf you map `fill` to a new variable, `geom_bar()` will display a _stacked_ bar chart:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut, fill = clarity))\n```\n\n::: {.cell-output-display}\n![](03-position-adjustments_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nThis plot displays 40 different combinations of `cut` and `clarity`, each displayed by its own rectangle. `geom_bar()` lays out the rectangles by stacking rectangles that have the same `cut` value on top of one another. You can change this behavior with a _position adjustment_.\n\n### `position = \"dodge\"`\n\nTo place rectangles that have the same `cut` value beside each other, set `position = \"dodge\"`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut, fill = clarity), position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](03-position-adjustments_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nThis plot shows the same rectangles as the previous chart; however, it lays out rectangles that have the same `cut` value _beside_ each other.\n\n### `position = \"stack\"`\n\nTo create the familiar stacked bar chart, set `position = \"stack\"` (which is the default for `geom_bar()`).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut, fill = clarity), position = \"stack\")\n```\n\n::: {.cell-output-display}\n![](03-position-adjustments_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### `position=\"fill\"`\n\nTo expand each bar to take up the entire $y$ axis, set `position = \"fill\"`. {ggplot2} will stack the rectangles and then scale them within each bar.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut, fill = clarity), position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](03-position-adjustments_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nThis makes it easy to _compare proportions_. For example, you can scan across the bars to see how the proportion of `IF` diamonds changes from cut to cut. \n\n### What is a position adjustment?\n\nEvery geom function in ggplot2 takes a `position` argument that is preset to a reasonable default. You can use `position` to determine how a geom should adjust objects that would otherwise overlap with each other. \n\nFor example, in our plot, each value of `cut` is associated with eight rectangles: one each for `I1`, `SI2`, `SI1`, `VS2`, `VS1`, `VVS2`, `VVS1`, and `IF`. Each of these eight rectangles deserves to go in the same place: directly above the value of `cut` that it is associated with, with the bottom of the rectangle placed at count = 0. But if we plotted the plot like that, the rectangles would overlap each other.\n\nHere's what that would look like if you could peek around the side of the graph.\n\n![](img/positions.png){width=80%}\n\n\n### `position = \"identity\"`\n\nâ€¦and here's what that would look like if you could see the graph from the front. You can make this plot by setting `position = \"identity\"`. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut, fill = clarity), position = \"identity\")\n```\n\n::: {.cell-output-display}\n![](03-position-adjustments_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nPosition adjustments tell {ggplot2} how to re-distribute objects when they overlap. `position = \"identity\"` is the \"adjustment\" that lets objects overlap each other. It is a bad choice for bar graphs because the result looks like a stacked bar chart, even though it is not. \n\n### Exercise 6: Positions\n\nUse the code chunk to recreate the plot you see below. Remember: `color` is the name of a variable in `diamonds` (not to be confused with an aesthetic).\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-position-adjustments_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = color, fill = clarity), position = \"fill\", width = 1)\n```\n\n:::\n\n### Exercise 7: Positions\n\nUse the code chunk to recreate the plot you see below. Remember: `color` is the name of a variable in `diamonds` (not to be confused with an aesthetic).\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-position-adjustments_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = color, fill = cut), position = \"dodge\")\n```\n\n:::\n\n\n### Exercise 8: `position = \"identity\"`\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-position-adjustments_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**Suppose the graph above uses `position = \"stack\"`. About how many diamonds have an ideal cut and a G color?**\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_1\" onsubmit=\"return validate_form_1()\" method=\"post\">\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_1\" value=\"5000\"/>\n<label>5000</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_2\" value=\"3000\"/>\n<label>3000</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_3\" value=\"1800\"/>\n<label>1800</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_4\" value=\"The graph doesn&#39;t contain enough information to make an estimate.\"/>\n<label>The graph doesn't contain enough information to make an estimate.</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_1\"></div>\n</form>\n<script>function validate_form_1() {var x, text; var x = document.forms['form_1']['answer_1'].value;if (x == '1800'){text = 'Correct! In a stacked bar chart, you can calculate the number of observations in each bar by subtracting the y value at the bottom of the bar from the y value at the top.';} else {text = 'I have a different answer';} document.getElementById('result_1').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_1').innerText == 'Correct! In a stacked bar chart, you can calculate the number of observations in each bar by subtracting the y value at the bottom of the bar from the y value at the top.';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n:::\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**Suppose the graph above uses `position = \"identity\"`. About how many diamonds have an ideal cut and a G color?**\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_2\" onsubmit=\"return validate_form_2()\" method=\"post\">\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_1\" value=\"5000\"/>\n<label>5000</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_2\" value=\"3000\"/>\n<label>3000</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_3\" value=\"1800\"/>\n<label>1800</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_4\" value=\"The graph doesn&#39;t contain enough information to make an estimate.\"/>\n<label>The graph doesn't contain enough information to make an estimate.</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_2\"></div>\n</form>\n<script>function validate_form_2() {var x, text; var x = document.forms['form_2']['answer_2'].value;if (x == '5000'){text = 'Correct! Here the green bar extends all the way from 5000 to 0; most of the bar is behind the blue, purple, and magenta bars. In practice, you would never construct a bar chart like this.';} else {text = 'I have a different answer';} document.getElementById('result_2').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2;res1 = document.getElementById('result_1').innerText == 'Correct! In a stacked bar chart, you can calculate the number of observations in each bar by subtracting the y value at the bottom of the bar from the y value at the top.'; res2 = document.getElementById('result_2').innerText == 'Correct! Here the green bar extends all the way from 5000 to 0; most of the bar is behind the blue, purple, and magenta bars. In practice, you would never construct a bar chart like this.';text = res1 + res2;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n:::\n\n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"04-facets.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "03-position-adjustments_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}