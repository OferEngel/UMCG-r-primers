{
  "hash": "dfd319604c3f2758c330316fc6a28e9e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bar charts\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n    - dplyr\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n### How to make a bar chart {.no-hide}\n\nTo make a bar chart with {ggplot2}, add `geom_bar()` to the [ggplot2 template](/01-basics/01-visualization-basics/01-code-template.qmd). For example, the code below plots a bar chart of the `cut` variable in the `diamonds` dataset, which comes with {ggplot2}.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = cut))\n```\n\n::: {.cell-output-display}\n![](01-bar-charts_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### The y axis\n\nYou should not supply a $y$ aesthetic when you use `geom_bar()`; {ggplot2} will count how many times each $x$ value appears in the data, and then display the counts on the $y$ axis. So, for example, the plot above shows that over 20,000 diamonds in the data set had a value of `Ideal`.\n\nYou can compute this information manually with the `count()` function from the {dplyr} package.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndiamonds |> \n  count(cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  cut           n\n  <ord>     <int>\n1 Fair       1610\n2 Good       4906\n3 Very Good 12082\n4 Premium   13791\n5 Ideal     21551\n```\n\n\n:::\n:::\n\n\n\n### `geom_col()`\n\nSometimes, you may want to map the heights of the bars not to counts, but to a variable in the data set. To do this, use `geom_col()`, which is short for column. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = pressure) +\n  geom_col(mapping = aes(x = temperature, y = pressure))\n```\n\n::: {.cell-output-display}\n![](01-bar-charts_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### `geom_col()` data\n\nWhen you use `geom_col()`, your $x$ and $y$ values should have a one to one relationship, as they do in the `pressure` data set (i.e. each value of `temperature` is paired with a single value of `pressure`).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npressure\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   temperature pressure\n1            0   0.0002\n2           20   0.0012\n3           40   0.0060\n4           60   0.0300\n5           80   0.0900\n6          100   0.2700\n7          120   0.7500\n8          140   1.8500\n9          160   4.2000\n10         180   8.8000\n11         200  17.3000\n12         220  32.1000\n13         240  57.0000\n14         260  96.0000\n15         280 157.0000\n16         300 247.0000\n17         320 376.0000\n18         340 558.0000\n19         360 806.0000\n```\n\n\n:::\n:::\n\n\n\n### Exercise 1: Make a bar chart\n\nUse the code chunk below to plot the distribution of the `color` variable in the `diamonds` data set, which comes in the {ggplot2} package.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = color))\n```\n\n:::\n\n\n### Exercise 2: Interpretation\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-bar-charts_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**What is the most common type of cut in the `diamonds` dataset?**\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_1\" onsubmit=\"return validate_form_1()\" method=\"post\">\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_1\" value=\"Fair\"/>\n<label>Fair</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_2\" value=\"Good\"/>\n<label>Good</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_3\" value=\"Very Good\"/>\n<label>Very Good</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_4\" value=\"Premium\"/>\n<label>Premium</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_5\" value=\"Ideal\"/>\n<label>Ideal</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_1\"></div>\n</form>\n<script>function validate_form_1() {var x, text; var x = document.forms['form_1']['answer_1'].value;if (x == 'Ideal'){text = 'Correct!';} else {text = 'I have a different answer';} document.getElementById('result_1').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_1').innerText == 'Correct!';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n:::\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**How many diamonds in the dataset had a `Good` cut?**\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_2\" onsubmit=\"return validate_form_2()\" method=\"post\">\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_1\" value=\"≈2000\"/>\n<label>≈2000</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_2\" value=\"≈5000\"/>\n<label>≈5000</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_3\" value=\"≈7000\"/>\n<label>≈7000</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_4\" value=\"≈20000\"/>\n<label>≈20000</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_2\"></div>\n</form>\n<script>function validate_form_2() {var x, text; var x = document.forms['form_2']['answer_2'].value;if (x == '≈5000'){text = 'Correct!';} else {text = 'I have a different answer';} document.getElementById('result_2').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2;res1 = document.getElementById('result_1').innerText == 'Correct!'; res2 = document.getElementById('result_2').innerText == 'Correct!';text = res1 + res2;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n:::\n\n\n### Exercise 3: What went wrong?\n\nDiagnose the error below and then fix the code chunk to make a plot.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = pressure) +\n  geom_bar(mapping = aes(x = temperature, y = pressure))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = pressure) +\n  geom_col(mapping = aes(x = temperature, y = pressure))\n```\n\n:::\n\n\n### Exercise 4: `count()` and `geom_col()`\n\nRecreate the bar graph of `color` from exercise one, but this time first use `count()` to manually compute the heights of the bars. Then use `geom_col()` to plot the results as a bar graph. Does your graph look the same as in exercise one?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\ndiamonds |> \n  count(color) |> \n  ggplot() +\n    geom_col(mapping = aes(x = color, y = n))\n```\n\n:::\n\n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"02-aesthetics.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "01-bar-charts_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}