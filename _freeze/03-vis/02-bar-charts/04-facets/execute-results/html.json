{
  "hash": "5aee9e758a5617d33c1b8b069cb1289e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Facets\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n### Facetting {.no-hide}\n\nYou can more easily compare subgroups of data if you place each subgroup in its own subplot, a process known as **facetting.**\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-facets_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n### `facet_grid()`\n\n{ggplot2} provides two functions for facetting. `facet_grid()` divides the plot into a grid of subplots based on the values of one or two facetting variables. To use it, add `facet_grid()` to the end of your plot call. \n\nThe code chunks below show three ways to facet with `facet_grid()`. Spot the differences between the chunks, then run the code to learn what the differences do.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = color)) +\n  facet_grid(rows = vars(clarity), cols = vars(cut))\n\n\n```\n\n:::\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = color)) +\n  facet_grid(cols = vars(cut))\n\n\n```\n\n:::\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = color)) +\n  facet_grid(rows = vars(clarity))\n\n\n```\n\n:::\n\n\n\n### `facet_grid()` recap\n\nAs you saw in the code examples, you use `facet_grid()` by passing a `rows` and/or a `cols` argument, with the names of the variables inside a `vars()` function.\n\n* `facet_grid()` will split the plot into facets vertically by the values of the `rows` variable: each facet will contain the observations that have a common value of the variable. \n* `facet_grid()` will split the plot horizontally by values of the `cols` variable. The result is a grid of facets, where each specific subplot shows a specific combination of values.\n\n\n### `facet_wrap()`\n\n`facet_wrap()` provides a more relaxed way to facet a plot on a _single_ variable. It will split the plot into subplots and then reorganize the subplots into multiple rows so that each plot has a more or less square aspect ratio. In short, `facet_wrap()` _wraps_ the single row of subplots that you would get with `facet_grid()` into multiple rows. \n\nTo use `facet_wrap()` pass it a variable name inside `vars()`, e.g. `facet_wrap(vars(color))`.\n\nAdd `facet_wrap()` to the code below to create the graph that appeared at the start of this section. Facet by `cut`.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = color, fill = cut))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = color, fill = cut)) +\n  facet_wrap(vars(cut))\n```\n\n:::\n\n\n### `scales`\n\nBy default, each facet in your plot will share the same $x$ and $y$ ranges. You can change this by adding a `scales` argument to `facet_wrap()` or `facet_grid()`.\n\n* `scales = \"free\"` will let the $x$ and $y$ range of each facet vary\n* `scales = \"free_x\"` will let the $x$ range of each facet vary, but not the $y$ range\n* `scales = \"free_y\"` will let the $y$ range of each facet vary, but not the $x$ range. This is a convenient way to compare the shapes of different distributions\n\nTry changing the `scales` argument from `free` to `free_x` to `free_y` to see how it works:\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_bar(mapping = aes(x = color, fill = cut)) +\n  facet_wrap(vars(cut), scales = \"free\")\n\n\n```\n\n:::\n\n\n\n### Recap\n\nIn this tutorial, you learned how to make bar charts; but much of what you learned applies to other types of charts as well. Here's what you should know:\n\n* Bar charts are the basis for histograms, which means that you can interpret histograms in a similar way.\n* Bars are not the only geom in {ggplot2} that use the fill aesthetic. You can use both fill and color aesthetics with any geom that has an \"interior\" region.\n* You can use the same position adjustments with any {ggplot2} geom: `\"identity\"`, `\"stack\"`, `\"dodge\"`, `\"fill\"`, `\"nudge\"`, and `\"jitter\"` (we'll learn about `\"nudge\"` and `\"jitter\"` later). Each geom comes with its own sensible default.\n* You can facet any {ggplot2} plot by adding `facet_grid()` or `facet_wrap()` to the plot call.\n\nBar charts are an excellent way to display the distribution of a categorical variable. In the next tutorial, we'll meet a set of geoms that display the distribution of a continuous variable.\n\n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "04-facets_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}