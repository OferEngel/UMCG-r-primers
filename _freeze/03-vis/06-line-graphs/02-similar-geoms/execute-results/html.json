{
  "hash": "ba6a91b6b783a94528e70aa1cf1dad50",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Similar geoms\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n    - dplyr\n    - forcats\n    - gapminder\n    - maps\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n```{webr-r}\n#| context: setup\nasia <- \n  gapminder |> \n  filter(country %in% c(\"China\", \"Korea, Dem. Rep.\", \"Korea, Rep.\", \"Japan\")) |> \n  mutate(country = fct_recode(country, \"North Korea\" = \"Korea, Dem. Rep.\", \"South Korea\" = \"Korea, Rep.\"))\n\ntx <- map_data(\"state\", region = \"texas\")\n```\n\n### `geom_step()` {.no-hide}\n\n`geom_step()` draws a line chart in a stepwise fashion. To see what I mean, change the geom in the plot below and rerun the code.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(asia) +\n  geom_line(mapping = aes(x = year, y = lifeExp, color = country, linetype = country))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(asia) +\n  geom_step(mapping = aes(x = year, y = lifeExp, color = country, linetype = country))\n```\n\n:::\n\n###\n\nGood job! You can control whether the steps move horizontally first and then vertically or vertically first and then horizontally with the parameters `direction = \"hv\"` (the default) or `direction = \"vh\"`.\n\n### `geom_area()`\n\n`geom_area()` is similar to a line graph, but it fills in the area under the line. To see `geom_area()` in action, change the geom in the plot below and rerun the code.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(economics) +\n  geom_line(mapping = aes(x = date, y = unemploy))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(economics) +\n  geom_area(mapping = aes(x = date, y = unemploy))\n```\n\n:::\n\n###\n\nGood job! Filling the space under the line gives you a new way to customize your plot.\n\n\n### Review 2 - Set vs. map\n\nDo you recall from [Visualization Basics](/basics/01-visualization-basics/) how you would set the fill of our plot to blue (instead of, say, map the `fill` to a variable)? Give it a try.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(economics) +\n  geom_area(mapping = aes(x = date, y = unemploy))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(economics) +\n  geom_area(mapping = aes(x = date, y = unemploy), fill = \"blue\")\n```\n\n:::\n\n###\n\nGood job! Remember that you map aesthetics to variables inside of `aes()`. You set aesthetics to values outside of `aes()`.\n\n\n### Accumulation\n\n`geom_area()` is a great choice if your measurements represent the accumulation of objects (like unemployed people). Notice that the $y$ axis `geom_area()` always begins or ends at zero.\n\nPerhaps because of this, `geom_area()` can be quirky when you have multiple groups. Run the code below. Can you tell what happens here?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(asia) +\n  geom_area(mapping = aes(x = year, y = lifeExp, fill = country))\n\n\n```\n\n:::\n\n\n### Review 3: Position adjustments\n\nIf you answered that people in China were living to be 300 years old, you guessed wrong. \n\n`geom_area()` is stacking each group above the group below. As a result, the line that should display the life expectancy for China displays the combined life expectancy for all countries.\n\nYou can fix this by changing the position adjustment for `geom_area()`. Give it a try below. Change the position parameter from \"stack\" (the implied default) to `\"identity\"`. See [Bar Charts](/visualize-data/02-bar-charts/) if you'd like to learn more about position adjustments.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(asia) +\n  geom_area(mapping = aes(x = year, y = lifeExp, fill = country), alpha = 0.3)\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(asia) +\n  geom_area(mapping = aes(x = year, y = lifeExp, fill = country), position = \"identity\", alpha = 0.3)\n```\n\n:::\n\n###\n\nGood job! You can further customize your graph by switching from `geom_area()` to `geom_ribbon()`. `geom_ribbon()` lets you map the bottom of the filled area to a variable, as well as the top. See `?geom_ribbon` if you'd like to learn more.\n\n\n### `geom_path()`\n\n`geom_line()` comes with a strange bedfellow, `geom_path()`. `geom_path()` draws a line between points like `geom_line()`, but instead of connecting points in the order that they appear along the $x$ axis, `geom_path()` connects the points in the order that they appear _in the data set_.\n\nIt starts with the observation in row one of the data and connects it to the observation in row two, which it then connects to the observation in row three, and so on.\n\n### `geom_path()` example\n\nTo see how `geom_path()` does this, let's rearrange the rows in the `economics` dataset. We can reorder them by `unemploy` value. Now the data set will begin with the observation that had the lowest value of `unemploy`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\neconomics2 <- economics |> \n  arrange(unemploy)\neconomics2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 574 × 6\n   date         pce    pop psavert uempmed unemploy\n   <date>     <dbl>  <dbl>   <dbl>   <dbl>    <dbl>\n 1 1968-12-01  576. 201621    11.1     4.4     2685\n 2 1968-09-01  568. 201095    10.6     4.6     2686\n 3 1968-10-01  572. 201290    10.8     4.8     2689\n 4 1969-02-01  589. 201881     9.7     4.9     2692\n 5 1968-04-01  544  200208    12.3     4.6     2709\n 6 1969-03-01  589. 202023    10.2     4       2712\n 7 1969-05-01  600. 202331    10.1     4.2     2713\n 8 1968-11-01  577. 201466    10.6     4.4     2715\n 9 1969-01-01  584. 201760    10.3     4.4     2718\n10 1968-05-01  550. 200361    12       4.4     2740\n# ℹ 564 more rows\n```\n\n\n:::\n:::\n\n\n\n### g`eom_path()` example continued\n\nIf we plot the reordered data with both `geom_line()` and `geom_path()` we get two very different graphs. \n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(economics2) +\n  geom_line(mapping = aes(x = date, y = unemploy))\n\nggplot(economics2) +\n  geom_path(mapping = aes(x = date, y = unemploy))\n```\n\n::: {.cell-output-display}\n![](02-similar-geoms_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![](02-similar-geoms_files/figure-html/unnamed-chunk-3-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\nThe plot on the left uses `geom_line()`, hence the points are connected in order along the $x$ axis. The plot on the right uses `geom_path()`. These points are connected in the order that they appear in the dataset, which happens to put them in order along the $y$ axis.\n\n### A use case\n\nWhy would you want to use `geom_path()`? The code below illustrates one particularly useful case. The `tx` dataset contains latitude and longitude coordinates saved in a specific order.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntx\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,088 × 6\n    long   lat group order region subregion\n   <dbl> <dbl> <dbl> <int> <chr>  <chr>    \n 1 -94.5  33.7     1     1 texas  <NA>     \n 2 -94.5  33.7     1     2 texas  <NA>     \n 3 -94.5  33.6     1     3 texas  <NA>     \n 4 -94.5  33.6     1     4 texas  <NA>     \n 5 -94.5  33.6     1     5 texas  <NA>     \n 6 -94.4  33.6     1     6 texas  <NA>     \n 7 -94.4  33.6     1     7 texas  <NA>     \n 8 -94.4  33.6     1     8 texas  <NA>     \n 9 -94.4  33.6     1     9 texas  <NA>     \n10 -94.3  33.6     1    10 texas  <NA>     \n# ℹ 1,078 more rows\n```\n\n\n:::\n:::\n\n\n\n\n### tx\n\nWhat do you think happens when you plot the data in `tx`? Run the code to find out.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(tx) +\n  geom_path(mapping = aes(x = long, y = lat))\n\n\n```\n\n:::\n\n###\n\nGood job! `geom_path()` reveals how you can use what is essentially a line plot to make a map (this is a map of the state of Texas). There are other better ways to make maps in R, but this low tech method is surprisingly versatile.\n\n### `geom_polygon()`\n\n`geom_polygon()` extends `geom_path()` one step further: it connects the last point to the first and then colors the interior region with a fill. The result is a polygon.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tx) +\n  geom_polygon(mapping = aes(x = long, y = lat))\n```\n\n::: {.cell-output-display}\n![](02-similar-geoms_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Exercise 2: Shattered glass\n\nWhat do you think went wrong in the plot of Texas below?\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-similar-geoms_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**What went wrong?**\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_11089\" onsubmit=\"return validate_form_11089()\" method=\"post\">\n<input type=\"radio\" name=\"answer_11089\" id=\"answer_11089_1\" value=\"The rows in the dataset became out of order.\"/>\n<label>The rows in the dataset became out of order.</label>\n<br/>\n<input type=\"radio\" name=\"answer_11089\" id=\"answer_11089_2\" value=\"The programmer did not set a fill aesthetic.\"/>\n<label>The programmer did not set a fill aesthetic.</label>\n<br/>\n<input type=\"radio\" name=\"answer_11089\" id=\"answer_11089_3\" value=\"The programmer used a line plot instead of a polygon plot.\"/>\n<label>The programmer used a line plot instead of a polygon plot.</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_11089\"></div>\n</form>\n<script>function validate_form_11089() {var x, text; var x = document.forms['form_11089']['answer_11089'].value;if (x == 'The rows in the dataset became out of order.'){text = 'Correct! It looks like someone messed with tx. tx and datasets like it will have an order variable that you can use to ensure that the data is in the correct order before you plot it.';} else {text = 'I have a different answer';} document.getElementById('result_11089').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_11089').innerText == 'Correct! It looks like someone messed with tx. tx and datasets like it will have an order variable that you can use to ensure that the data is in the correct order before you plot it.';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n:::\n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"03-maps.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "02-similar-geoms_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}