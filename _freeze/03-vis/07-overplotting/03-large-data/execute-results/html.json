{
  "hash": "7ebc20537db82e31845a3eaa765e14ac",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Large data\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n    - hexbin\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n### Overplotting due to large data {.no-hide}\n\nA dataset does not need to be truly \"Big Data\" to be hard to visualize. The `diamonds` data set contains fewer than 54,000 points, but it still suffers from overplotting when you try to plot `carat` vs. `price.` Here the bulk of the points fall on top of each other in an impenetrable cloud of blackness.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = diamonds) +\n  geom_point(mapping = aes(x = carat, y = price))\n```\n\n::: {.cell-output-display}\n![](03-large-data_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Strategies for large data\n\nAlpha and jittering are less useful for large data. Jittering will not separate the points, and a mass of transparent points can still look black.\n\nA better way to deal with overplotting due to large data is to visualize a summary of the data. In fact, we've already worked with this dataset by using geoms that naturally summarize the data, like `geom_histogram()` and `geom_smooth()`.\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-large-data_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![](03-large-data_files/figure-html/unnamed-chunk-3-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\nLet's look at several other geoms that you can use to summarize relationships in large data.\n\n\n### Review: Boxplots with continuous variables\n\nBoxplots efficiently summarize data, which make them a useful tool for large data sets. In the [boxplots tutorial](/03-viz/05-counts.html), you learned how to use `cut_width()` and the group aesthetic to plot multiple boxplots for a continuous variable.\n\nModify the code below to cut the carat axis into intervals with width 0.2. Then set the group aesthetic of `geom_boxplot()` to the result.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_boxplot(mapping = aes(x = carat, y = price))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_boxplot(mapping = aes(x = carat, y = price, group = cut_width(carat, width = 0.2)))\n```\n\n:::\n\n###\n\nGood job! The medians of the boxplots give a somewhat more precise description of the relationship between carat and price than does the fan of individual points.\n\n\n### `geom_bin2d()`\n\n`geom_bin2d()` provides a new way to summarize two dimensional continuous relationships. You can think of bin2d as working like a three dimensional histogram. It divides the Cartesian field into small rectangular bins, like a checkerboard. It then counts how many points fall into each bin, and maps the count to color. Bins that contain no points are left blank.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = diamonds) +\n  geom_bin2d(mapping = aes(x = carat, y = price))\n```\n\n::: {.cell-output-display}\n![](03-large-data_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nBy studying the results, we can see that the mass of points falls in the bottom left of the graph.\n\n### Exercise: binwidths\n\nLike histograms, bin2d use `bins` and `binwidth` arguments. Each should be set to a vector of two numbers: one for the number of bins (or binwidths) to use on the x axis, and one for the number of bins (or binwidths) to use on the y axis.\n\nUse one of these parameters to modify the graph below to use 40 bins on the x axis and 50 on the y axis.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_bin2d(mapping = aes(x = carat, y = price))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_bin2d(mapping = aes(x = carat, y = price), bins = c(40, 50))\n```\n\n:::\n\nGood job! As with histograms, bin2ds can reveal different information at different binwidths.\n\n### Exercise: `geom_hex()`\n\nOur eyes are drawn to straight vertical and horizontal lines, which makes it easy to perceive \"edges\" in a bin2d that are not necessarily there (the rectangular bins naturally form edges that span the breadth of the graph).\n\nOne way to avoid this, if you like, is to use `geom_hex()`. `geom_hex()` functions like `geom_bin2d()` but uses hexagonal bins. Adjust the graph below to use `geom_hex()`.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_bin2d(mapping = aes(x = carat, y = price))\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_hex(mapping = aes(x = carat, y = price))\n```\n\n:::\n\n\n###\n\nGood job! You need to have the {hexbin} package installed on your computer, but not necessarily loaded, to use `geom_hex()`.\n\n\n### `geom_density2d()`\n\n`geom_density2d()` provides one last way to summarize a two dimensional continuous relationship. Think of density2d as the two dimensional analog of density. Instead of drawing a line that rises and falls on the y dimension, it draws a field over the coordinate axes that rises and falls on the z dimension, that's the dimension that points straight out of the graph towards you.\n\nThe result is similar to a mountain that you are looking straight down upon. The high places on the mountain show where the most points fall and the low places show where the fewest points fall. To visualize this mountain, density2d draws contour lines that connect areas with the same \"height\", just like a contour map draws elevation.\n\nHere we see the \"ridge\" of points that occur at low values of carat and price.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = diamonds) +\n  geom_density2d(mapping = aes(x = carat, y = price))\n```\n\n::: {.cell-output-display}\n![](03-large-data_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Expand limits\n\nBy default, density2d zooms in on the region that contains density lines. This may not be the same region spanned by the data points. If you like, you can re-expand the graph to the region spanned by the price and carat variables with `expand_limits()`.\n\n`expand_limits()` zooms the x and y axes to the fit the range of any two variables (they need not be the original x and y variables).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = diamonds) +\n  geom_density2d(mapping = aes(x = carat, y = price)) +\n  expand_limits(x = diamonds$carat, y = diamonds$price)\n```\n\n::: {.cell-output-display}\n![](03-large-data_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n### Exercise: density2d\n\nOften density2d plots are easiest to read when you plot them on top of the original data. In the chunk below create a plot of diamond carat size vs. price. The plot should contain density2d lines superimposed _on top of_ the raw points. Make the raw points transparent with an alpha of 0.1.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds, mapping = aes(x = carat, y = price)) +\n  geom_point(alpha = 0.1) +\n  geom_density2d()\n```\n\n:::\n\nGood job! Plotting a summary on top of raw values is a common pattern in data science.\n\n\n### Recap\n\nOverplotting is a common phenomenon in plots because the causes of overplotting area common phenomenon in data sets. Data sets often\n\n* round values to a common set of values, or\n* are too big to visualize easily without overplotting\n\nWhen overplotting results from rounding errors, you can work around it by manipulating the transparency or location of the points.\n\nFor larger datasets you can use geoms that summarize the data to display relationships without overplotting. This is an effective tactic for truly big data as well, and it also works for the first case of overplotting due to rounding.\n\nOne final tactic is to sample your data to create a sample data set that is small enough to visualize without overplotting.\n\nYou've now learned a complete toolkit for exploring data visually. The final tutorial in this primer will show you how to polish the plots you make for publication. Instead of learning how to visualize data, you will learn how to add titles and captions, customize color schemes and more.\n\n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "03-large-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}