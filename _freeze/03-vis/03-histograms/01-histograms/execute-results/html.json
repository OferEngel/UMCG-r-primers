{
  "hash": "c75465a15860697ae55b569469286dd3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Histograms\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n### Introduction {.no-hide}\n\nWatch [this video](https://vimeo.com/221607341):\n\n\n\n```{=html}\n<div class=\"ratio ratio-4x3\">\n<iframe src=\"https://player.vimeo.com/video/221607341\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div>\n```\n\n\n\n### How to make a histogram\n\nTo make a histogram with {ggplot2}, add `geom_histogram()` to the [ggplot2 template](/01-basics/01-visualization-basics/01-code-template.qmd). For example, the code below plots a histogram of the `carat` variable in the `diamonds` dataset, which comes with {ggplot2}.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_histogram(mapping = aes(x = carat))\n\n\n```\n\n:::\n\n### The $y$ variable\n\nAs with `geom_bar()`, you do not need to give `geom_histogram()` a $y$ variable. `geom_histogram()` will construct its own $y$ variable by counting the number of observations that fall into each bin on the $x$ axis. `geom_histogram()` will then map the counts to the $y$ axis. \n\nAs a result, you can glance at a bar to determine how many observations fall within a bin. Bins with tall bars highlight common values of the $x$ variable.\n\n### Exercise 1: Interpretation\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-histograms_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**According to the chart, which is the most common carat size in the data?**\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_1\" onsubmit=\"return validate_form_1()\" method=\"post\">\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_1\" value=\"Approximately 0.3 or 0.4 carats\"/>\n<label>Approximately 0.3 or 0.4 carats</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_2\" value=\"Approximately 1 carat\"/>\n<label>Approximately 1 carat</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_3\" value=\"Approximately 1.5 carats\"/>\n<label>Approximately 1.5 carats</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_4\" value=\"Approximately 2 carats\"/>\n<label>Approximately 2 carats</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_1\"></div>\n</form>\n<script>function validate_form_1() {var x, text; var x = document.forms['form_1']['answer_1'].value;if (x == 'Approximately 0.3 or 0.4 carats'){text = 'Correct! More than 15,000 diamonds in the data have a value in the bin near 0.3 and 0.4. That’s more than any other bin. How do we know? Because the bar above 0.3 to 0.4 goes to 15,000, higher than any other bar in the plot.';} else {text = 'I have a different answer';} document.getElementById('result_1').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_1').innerText == 'Correct! More than 15,000 diamonds in the data have a value in the bin near 0.3 and 0.4. That’s more than any other bin. How do we know? Because the bar above 0.3 to 0.4 goes to 15,000, higher than any other bar in the plot.';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n:::\n\n\n### `binwidth`\n\nBy default, {ggplot2} will choose a binwidth for your histogram that results in about 30 bins. You can set the binwidth manually with the `binwidth` argument, which is interpreted in the units of the x axis:\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_histogram(mapping = aes(x = carat), binwidth = 1)\n\n\n```\n\n:::\n\n### `bins`\n\nAlternatively, you can set the binwidth with the `bins` argument which takes the total number of bins to use:\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_histogram(mapping = aes(x = carat), bins = 10)\n\n\n```\n\n:::\n\nIt can be hard to determine what the actual binwidths are when you use `bins`, since they may not be round numbers.\n\n### `boundary`\n\nYou can move the bins left and right along the $x$ axis with the `boundary` argument. `boundary` takes an $x$ value to use as the boundary between two bins ({ggplot2} will align the rest of the bins accordingly): \n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_histogram(mapping = aes(x = carat), bins = 10, boundary = 0)\n\n\n```\n\n:::\n\n### Exercise 2: `binwidth`\n\nWhen you use `geom_histogram()`, you should always experiment with different binwidths because different size bins reveal different types of information.\n\nTo see an example of this, make a histogram of the `carat` variable in the `diamonds` dataset. Use a bin size of 0.5 carats. What does the overall shape of the distribution look like?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = diamonds) +\n  geom_histogram(mapping = aes(x = carat), binwidth = _____)\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_histogram(mapping = aes(x = carat), binwidth = 0.5)\n```\n\n:::\n\n###\n\nGood job! The most common diamond size is about 0.5 carats. Larger sizes become progressively less frequent as carat size increases. This accords with general knowledge about diamonds, so you may be prompted to stop exploring the distribution of carat size. But should you?\n\n\n### Exercise 3: another `binwidth`\n\nRecreate your histogram of `carat` but this time use a `binwidth` of 0.1. Does your plot reveal new information? Look closely. Is there more than one peak? Where do the peaks occur?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_histogram(mapping = aes(x = carat), binwidth = 0.1)\n```\n\n:::\n\n###\n\nGood job! The new `binwidth` reveals a new phenomena: carat sizes like 0.5, 0.75, 1, 1.5, and 2 are much more common than carat sizes that do not fall near a common fraction. Why might this be?\n\n\n### Exercise 4: another `binwidth`\n\nRecreate your histogram of `carat` a final time, but this time use a `binwidth` of 0.01 and set the first boundary to zero. Try to find one new pattern in the results.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_histogram(mapping = aes(x = carat), binwidth = 0.01, boundary = 0)\n```\n\n:::\n\n###\n\nGood job! The new `binwidth` reveals another phenomena: each peak is very right skewed. In other words, diamonds that are 1.01 carats are much more common than diamonds that are .99 carats. Why would that be?\n\n\n### Aesthetics\n\nVisually, histograms are very similar to bar charts. As a result, they use the same aesthetics: _alpha_, _color_, _fill_, _linetype_, and _size_.\n\nThey also behave in the same odd way when you use the color aesthetic. Do you remember what happens?\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**Which aesthetic would you use to color the interior fill of each bar in a histogram?**\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_2\" onsubmit=\"return validate_form_2()\" method=\"post\">\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_1\" value=\"color\"/>\n<label>color</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_2\" value=\"fill\"/>\n<label>fill</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_2\"></div>\n</form>\n<script>function validate_form_2() {var x, text; var x = document.forms['form_2']['answer_2'].value;if (x == 'fill'){text = 'Correct! For geoms with “substance”, like bars, fill controls the color of the interior of the geom. Color controls the outline.';} else {text = 'Not quite. For histograms, color controls color of the outline of each bar.';} document.getElementById('result_2').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2;res1 = document.getElementById('result_1').innerText == 'Correct! More than 15,000 diamonds in the data have a value in the bin near 0.3 and 0.4. That’s more than any other bin. How do we know? Because the bar above 0.3 to 0.4 goes to 15,000, higher than any other bar in the plot.'; res2 = document.getElementById('result_2').innerText == 'Correct! For geoms with “substance”, like bars, fill controls the color of the interior of the geom. Color controls the outline.';text = res1 + res2;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n:::\n\n\n### Exercise 5: Putting it all together\n\nRecreate the histogram below. \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-histograms_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = diamonds) +\n  geom_histogram(mapping = aes(x = price, fill = cut), binwidth = 1000, boundary = 0)\n```\n\n:::\n\n###\n\nGood job! Did you ensure that each `binwidth` is 1000 and that the first boundary is zero?\n\n\n##\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"02-similar-geoms.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "01-histograms_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}