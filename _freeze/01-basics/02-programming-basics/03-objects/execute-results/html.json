{
  "hash": "0cdb7f74f48e9f3db17538847b1cce4f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Objects\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n\n### Objects {.no-hide}\n\nWatch [this video](https://vimeo.com/220493412):\n\n\n\n\n```{=html}\n<div class=\"ratio ratio-4x3\">\n<iframe src=\"https://player.vimeo.com/video/220493412\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div>\n```\n\n\n\n\n### Object names\n\nYou can choose almost any name you like for an object, as long as the name does not begin with a number or a special character like `+`, `-`, `*`, `/`, `^`, `!`, `@`, or `&`. \n\nFor instance, check out this list of some possible object names. Some are okay to use; some are invalid:\n\n- `today`: This is fine\n- `1st`: This is **bad**; it starts with a number\n- `+1`: This is **bad**; it starts with a special character\n- `vars`: This is fine\n- `\\^_^`: This is **bad**; it starts with a special character\n- `foo`: This is fine\n\n\n### Using objects\n\nIn the code chunk below, save the results of `rnorm(100, mean = 100, sd = 15)` to an object named `data`. Then, on a new line, call the `hist()` function on `data` to plot a histogram of the random values.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\ndata <- rnorm(100, mean = 100, sd = 15)\nhist(data)\n```\n\n:::\n\n### What if?\n\nWhat do you think would happen if you assigned `data` to a new object named `copy`, like this? Run the code and then inspect both `data` and `copy`.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\ndata <- rnorm(100, mean = 100, sd = 15)\ncopy <- data\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\ndata <- rnorm(100, mean = 100, sd = 15)\ncopy <- data\ndata\ncopy\n```\n\n:::\n\n###\n\nGood job! R saves a copy of the contents in data to copy.\n\n### Datasets\n\nObjects provide an easy way to store datasets in R. In fact, R comes with many toy datasets pre-loaded. Examine the contents of `mtcars` to see a classic toy dataset. Hint: how could you learn more about the `mtcars` object?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nmtcars\n```\n\n:::\n\n###\n\nGood job! You can learn more about mtcars by examining its help page with `?mtcars`.\n\n### `rm()`\n\nWhat if you accidentally overwrite an object? If that object came with R or one of its packages, you can restore the original version of the object by removing your version with `rm()`. Run `rm()` on `mtcars` below to restore the mtcars data set.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nmtcars <- 1\nmtcars\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nmtcars <- 1\nmtcars\nrm(mtcars)\nmtcars\n```\n\n:::\n\n###\n\nGood job! Unfortunately, `rm()` cannot help you if you overwrite one of your own objects.\n\n##\n\n\n\n\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"04-vectors.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}