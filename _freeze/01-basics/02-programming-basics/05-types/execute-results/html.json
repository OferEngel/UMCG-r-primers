{
  "hash": "a69fb914144b307302b0af95564d5403",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Types\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n\n### Types {.no-hide}\n\nWatch [this video](https://vimeo.com/220490241):\n\n\n\n\n```{=html}\n<div class=\"ratio ratio-4x3\">\n<iframe src=\"https://player.vimeo.com/video/220490241\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div>\n```\n\n\n\n\n### Atomic types\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**Which of these is not an atomic data type?**\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_1\" onsubmit=\"return validate_form_1()\" method=\"post\">\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_1\" value=\"numeric/double\"/>\n<label>numeric/double</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_2\" value=\"integer\"/>\n<label>integer</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_3\" value=\"character\"/>\n<label>character</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_4\" value=\"logical\"/>\n<label>logical</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_5\" value=\"complex\"/>\n<label>complex</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_6\" value=\"raw\"/>\n<label>raw</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_7\" value=\"simple\"/>\n<label>simple</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_1\"></div>\n</form>\n<script>function validate_form_1() {var x, text; var x = document.forms['form_1']['answer_1'].value;if (x == 'simple'){text = 'Correct!';} else {text = 'I have a different answer';} document.getElementById('result_1').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_1').innerText == 'Correct!';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n\n:::\n\n### What type?\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**What type of data is `\"1L\"`?**\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_2\" onsubmit=\"return validate_form_2()\" method=\"post\">\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_1\" value=\"numeric/double\"/>\n<label>numeric/double</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_2\" value=\"integer\"/>\n<label>integer</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_3\" value=\"character\"/>\n<label>character</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_4\" value=\"logical\"/>\n<label>logical</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_2\"></div>\n</form>\n<script>function validate_form_2() {var x, text; var x = document.forms['form_2']['answer_2'].value;if (x == 'character'){text = 'Correct! This was tricky because of the quotes. 1L by itself would be an integer, but values become characters when they’re in quotes.';} else {text = 'I have a different answer';} document.getElementById('result_2').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2;res1 = document.getElementById('result_1').innerText == 'Correct!'; res2 = document.getElementById('result_2').innerText == 'Correct! This was tricky because of the quotes. 1L by itself would be an integer, but values become characters when they’re in quotes.';text = res1 + res2;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n\n:::\n\n### Integers\n\nCreate a vector of integers from one to five. Can you imagine why you might want to use integers instead of numbers/doubles?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nc(1L, 2L, 3L, 4L, 5L)\n```\n\n:::\n\n\n### Floating point arithmetic\n\nComputers must use a finite amount of memory to store decimal numbers (which can sometimes require infinite precision). As a result, some decimals can only be saved as very precise approximations. From time to time you'll notice side effects of this imprecision, like below.\n\nCompute the square root of two, square the answer (e.g. multiply the square root of two by the square root of two), and then subtract two from the result. What answer do you expect? What answer do you get?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nsqrt(2) * sqrt(2) - 2\nsqrt(2)^2 - 2\n```\n\n:::\n\n\n### Vectors\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**How many types of data can you put into a single vector?**\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_3\" onsubmit=\"return validate_form_3()\" method=\"post\">\n<input type=\"radio\" name=\"answer_3\" id=\"answer_3_1\" value=\"1\"/>\n<label>1</label>\n<br/>\n<input type=\"radio\" name=\"answer_3\" id=\"answer_3_2\" value=\"6\"/>\n<label>6</label>\n<br/>\n<input type=\"radio\" name=\"answer_3\" id=\"answer_3_3\" value=\"As many as you like\"/>\n<label>As many as you like</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_3\"></div>\n</form>\n<script>function validate_form_3() {var x, text; var x = document.forms['form_3']['answer_3'].value;if (x == '1'){text = 'Correct!';} else {text = 'I have a different answer';} document.getElementById('result_3').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3;res1 = document.getElementById('result_1').innerText == 'Correct!'; res2 = document.getElementById('result_2').innerText == 'Correct! This was tricky because of the quotes. 1L by itself would be an integer, but values become characters when they’re in quotes.'; res3 = document.getElementById('result_3').innerText == 'Correct!';text = res1 + res2 + res3;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n\n:::\n\n### Character or object?\n\nOne of the most common mistakes in R is to call an object when you mean to call a character string and vice versa.\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**Which of these are object names? What is the difference between object names and character strings?**\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_4\" onsubmit=\"return validate_form_4()\" method=\"post\">\n<input type=\"checkbox\" id=\"answer_4_1\" value=\"foo\"/>\n<label>foo</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_4_2\" value=\"&quot;num&quot;\"/>\n<label>\"num\"</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_4_3\" value=\"mu\"/>\n<label>mu</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_4_4\" value=\"&quot;sigma&quot;\"/>\n<label>\"sigma\"</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_4_5\" value=\"&quot;data&quot;\"/>\n<label>\"data\"</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_4_6\" value=\"a\"/>\n<label>a</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_4\"></div>\n</form>\n<script>function validate_form_4() {var text; var x1 = document.getElementById('answer_4_1'); var x2 = document.getElementById('answer_4_2'); var x3 = document.getElementById('answer_4_3'); var x4 = document.getElementById('answer_4_4'); var x5 = document.getElementById('answer_4_5'); var x6 = document.getElementById('answer_4_6'); if (x1.checked == true&x2.checked == false&x3.checked == true&x4.checked == false&x5.checked == false&x6.checked == true){text = 'Correct! Character strings are surrounded by quotation marks, object names are not.';} else {text = 'I have a different answer';} document.getElementById('result_4').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4;res1 = document.getElementById('result_1').innerText == 'Correct!'; res2 = document.getElementById('result_2').innerText == 'Correct! This was tricky because of the quotes. 1L by itself would be an integer, but values become characters when they’re in quotes.'; res3 = document.getElementById('result_3').innerText == 'Correct!'; res4 = document.getElementById('result_4').innerText == 'Correct! Character strings are surrounded by quotation marks, object names are not.';text = res1 + res2 + res3 + res4;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n\n:::\n\n\n##\n\n\n\n\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"06-lists.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}