{
  "hash": "6c1b51336be31a84adbbf2a3375e52d9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lists\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n\n### Lists {.no-hide}\n\nWatch [this video](https://vimeo.com/220490360):\n\n\n\n\n```{=html}\n<div class=\"ratio ratio-4x3\">\n<iframe src=\"https://player.vimeo.com/video/220490360\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div>\n```\n\n\n\n\n### Lists vs. vectors\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**Which data structure(s) could you use to store these pieces of data in the same object? `1001`, `TRUE`, `\"stories\"`**\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_1\" onsubmit=\"return validate_form_1()\" method=\"post\">\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_1\" value=\"a vector\"/>\n<label>a vector</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_2\" value=\"a list\"/>\n<label>a list</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_3\" value=\"neither\"/>\n<label>neither</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_1\"></div>\n</form>\n<script>function validate_form_1() {var x, text; var x = document.forms['form_1']['answer_1'].value;if (x == 'a list'){text = 'Correct! Lists can contain elements that are different types.';} else {text = 'I have a different answer';} document.getElementById('result_1').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_1').innerText == 'Correct! Lists can contain elements that are different types.';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n\n:::\n\n\n### Make a list\n\nMake a list that contains the elements `1001`, `TRUE`, and `\"stories\"`. Give each element a name.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nlist(number = 1001, logical = TRUE, string = \"stories\")\n```\n\n:::\n\n\n### Extract an element\n\nExtract the number 1001 from the list below.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nthings <- list(number = 1001, logical = TRUE, string = \"stories\")\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nthings <- list(number = 1001, logical = TRUE, string = \"stories\")\nthings$number\n```\n\n:::\n\n### Data Frames\n\nYou can make a data frame with the `data.frame()` function, which works similar to `c()`, and `list()`. Assemble the vectors below into a data frame with the column names `numbers`, `logicals`, `strings`.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nnums <- c(1, 2, 3, 4)\nlogs <- c(TRUE, TRUE, FALSE, TRUE)\nstrs <- c(\"apple\", \"banana\", \"carrot\", \"duck\")\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nnums <- c(1, 2, 3, 4)\nlogs <- c(TRUE, TRUE, FALSE, TRUE)\nstrs <- c(\"apple\", \"banana\", \"carrot\", \"duck\")\ndata.frame(numbers = nums, logicals = logs, strings = strs)\n```\n\n:::\n\n###\n\nGood job. When you make a data frame, you must follow one rule: each column vector should be the same length\n\n\n### Extract a column\n\nGiven that a data frame is a type of list (with named elements), how could you extract the strings column of the `df` data frame below? Do it.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nnums <- c(1, 2, 3, 4)\nlogs <- c(TRUE, TRUE, FALSE, TRUE)\nstrs <- c(\"apple\", \"banana\", \"carrot\", \"duck\")\ndf <- data.frame(numbers = nums, logicals = logs, strings = strs)\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\ndf$strings\n```\n\n:::\n\n##\n\n\n\n\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"07-packages.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}