{
  "hash": "c152d9f64843443f0a2f66cdfdd382ea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Aesthetic mappings\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n\n> \"The greatest value of a picture is when it forces us to notice what we never expected to see.\" \n> \n> --- John Tukey\n\n### A closer look\n\nIn the plot below, one group of points (highlighted in red) seems to fall outside of the linear trend between engine size and gas mileage. These cars have a higher mileage than you might expect. How can you explain these cars? \n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-aesthetic-mappings_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### A hypothesis\n\nLet's hypothesize that the cars are hybrids. One way to test this hypothesis is to look at the `class` value for each car. The `class` variable of the `mpg` dataset classifies cars into groups such as compact, midsize, and SUV. If the outlying points are hybrids, they should be classified as compact cars or, perhaps, subcompact cars (keep in mind that this data was collected before hybrid trucks and SUVs became popular). To check this, we need to add the `class` variable to the plot.\n\n### Aesthetics\n\nYou can add a third variable, like `class`, to a two dimensional scatterplot by mapping it to a new __aesthetic__. An aesthetic is a visual property of the objects in your plot. Aesthetics include things like the size, the shape, or the color of your points. \n\nYou can display a point (like the one below) in different ways by changing the values of its aesthetic properties. Since we already use the word \"value\" to describe data, let's use the word \"level\" to describe aesthetic properties. Here we change the levels of a point's size, shape, and color to make the point small, triangular, or blue:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-aesthetic-mappings_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n### A strategy\n\nWe can add the `class` variable to the plot by mapping the levels of an aesthetic (like color) to the values of `class`. For example, we can color a point green if it belongs to the compact class, blue if it belongs to the midsize class, and so on. \n\nLet's give this a try. Fill in the blank piece of code below with `color = class`. What happens? Delete the underline characters (`_____`) before running your code. (If you prefer British English, you can use `colour` instead of `color`.)\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy, ____________)\n  ) + \n  geom_point()\n```\n\n## {{< fa lightbulb >}}&ensp;Hint\n\n**Hint:** Be sure to remove all of the underlines and hashtags from the code.\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy, color = class)\n  ) + \n  geom_point()\n```\n\n:::\n\n###\n\nGreat Job! You can now tell which class of car each point represents by examining the color of the point.\n\n### And the answer is...\n\nThe colors reveal that many of the unusual points in `mpg` are two-seater cars. These cars don't seem like hybrids, and are, in fact, sports cars! Sports cars have large engines like SUVs and pickup trucks, but small bodies like midsize and compact cars, which improves their gas mileage. In hindsight, these cars were unlikely to be hybrids since they have large engines.\n\nThis isn't the only insight we've gleaned; you've also learned how to add new aesthetics to your graph. Let's review the process.\n\n### Aesthetic mappings\n\nTo map an aesthetic to a variable, set the name of the aesthetic equal to the name of the variable, and do this inside `mapping = aes()`. ggplot2 will automatically assign a unique level of the aesthetic (here a unique color) to each unique value of the variable. ggplot2 will also add a legend that explains which levels correspond to which values.\n\nThis insight gives us a new way to think about the mapping argument. Mappings tell ggplot2 more than which variables to put on which axes, they tell ggplot2 which variables to map to which visual properties. The x and y locations of each point are just two of the many visual properties displayed by a point.\n\n### Other aesthetics\n\nIn the above example, we mapped color to `class`, but we could have mapped size to `class` in the same way. \n\nChange the code below to map `size` to `class`. What happens? \n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy, color = class)\n  ) + \n  geom_point()\n```\n\n## {{< fa lightbulb >}}&ensp;Hint\n\n**Hint:** If `color` controls the _aesthetic_, what word do you suppose controls the _size_ aesthetic?\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy, size = class)\n  ) + \n  geom_point()\n```\n\n:::\n\n###\n\nGreat Job! Now the size of a point represents its class. Did you notice the warning message? ggplot2 gives us a warning here because mapping an unordered variable (class) to an ordered aesthetic (size) is not a good idea.\n\n\n### alpha\n\nYou can also map `class` to the `alpha` aesthetic, which controls the transparency of the points. Try it below.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point()\n```\n\n## {{< fa lightbulb >}}&ensp;Hint\n\n**Hint:** If `color` controls the _aesthetic_, what word do you suppose controls the _alpha_ aesthetic?\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy, alpha = class)\n  ) + \n  geom_point()\n```\n\n:::\n\n###\n\nGreat Job! If you look closely, you can spot something subtle: many locations contain multiple points stacked on top of each other (alpha is additive so multiple transparent points will appear opaque).\n\n### Shape\n\nLet's try one more aesthetic. This time map the class of the points to `shape`, then look for the SUVs. What happened?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point()\n```\n\n## {{< fa lightbulb >}}&ensp;Hint\n\n**Hint:** If `color` controls the _aesthetic_, what word do you suppose controls the _shape_ aesthetic?\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, shape = class)) + \n  geom_point()\n```\n\n:::\n\n###\n\nWhat happened to the SUVs? ggplot2 will only use six shapes at a time. By default, additional groups will go unplotted when you use the shape aesthetic. So only use it when you have fewer than seven groups.\n\n### Exercise 1\n\nIn the code below, map `cty`, which is a continuous variable, to `color`, `size`, and `shape`. How do these aesthetics behave differently for continuous variables, like `cty`, vs. categorical variables, like `class`? \n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\n# Map cty to color\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy)\n  ) + \n  geom_point()\n\n# Map cty to size\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy)\n  ) + \n  geom_point()\n\n# Map cty to shape\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy)\n  ) + \n  geom_point()\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\n# Map cty to color\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy, color = cty)\n  ) + \n  geom_point()\n\n# Map cty to size\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy, size = cty)\n  ) + \n  geom_point()\n\n# Map cty to shape\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy, shape = cty)\n  ) + \n  geom_point()\n```\n\n:::\n\n###\n\nVery nice! `ggplot2` treats continuous and categorical variables differently. Note, `ggplot2` supplies a blue gradient when you map a continuous variable to color, and `ggplot2` will not map continuous variables to shape.\n    \n### Exercise 2\n\nMap `class` to `color`, `size`, and `shape` all in the same plot. Does it work?\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy)\n  ) + \n  geom_point()\n```\n\n## {{< fa lightbulb >}}&ensp;Hint\n\n**Hint:** Be sure to set each mapping separately, e.g. `color = class`, `size = class`, etc.\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(\n  data = mpg, \n  mapping = aes(\n    x = displ, \n    y = hwy, \n    color = class, \n    size = class, \n    shape = class\n    )\n  ) + \n  geom_point()\n```\n\n:::\n\n###\n\nVery nice! ggplot2 can map the same variable to multiple aesthetics.\n\n### Exercise 3\n\nWhat happens if you map an aesthetic to something other than a variable name, like `aes(colour = displ < 5)`?  Try it.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy)\n  ) + \n  geom_point()\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy, color = displ < 5)\n  ) + \n  geom_point()\n```\n\n:::\n    \n###\n\nGood job! `ggplot2` will map the aesthetic to the results of the expression. Here, ggplot2 mapped the color of each point to TRUE or FALSE based on whether the point's `displ` value was less than five.\n\n### Setting aesthetics\n\nWhat if you just want to make all of the points in your plot blue, like in the plot below?\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-aesthetic-mappings_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nYou can do this by setting the color aesthetic _outside_ of the `aes()` function, like this\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy)\n  ) +\n  geom_point(color = \"blue\")\n```\n\n:::\n\n\n### Setting vs. Mapping\n\nSetting works for every aesthetic in ggplot2. If you want to manually set the aesthetic to a **value** in the visual space, set the aesthetic outside of `aes()`. \n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = mpg, \n       mapping = aes(x = displ, y = hwy)) +\n  geom_point(color = \"blue\", shape = 3, alpha = 0.5)\n```\n\n:::\n\nIf you want to map the aesthetic to a **variable** in the data space, map the aesthetic inside `aes()`.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(\n  data = mpg,\n  mapping = aes(\n    x = displ, \n    y = hwy, \n    color = class, \n    shape = fl, \n    alpha = displ\n    )\n  ) +\n  geom_point()\n```\n\n:::\n\n\n### Exercise 4\n\nWhat do you think went wrong in the code below? Fix the code so it does something sensible.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy, color = \"blue\")\n  ) +\n  geom_point()\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(\n  data = mpg, \n  mapping = aes(x = displ, y = hwy)\n  ) +\n  geom_point(color = \"blue\")\n```\n\n:::\n\n###\n\nGood job! Putting an aesthetic in the wrong location is one of the most common graphing errors. Sometimes it helps to think of legends. If you will need a legend to understand what the color/shape/etc. means, then you should probably put the aesthetic inside `aes()` --- ggplot2 will build a legend for every aesthetic mapped here. If the aesthetic has no meaning and is just... well, aesthetic, then set it outside of `aes()`.\"\n\n\n### Recap\n\nFor each aesthetic, you associate the name of the aesthetic with a variable to display, and you do this within `aes()`. \n\nOnce you map a variable to an aesthetic, ggplot2 takes care of the rest. It selects a reasonable scale to use with the aesthetic, and it constructs a legend that explains the mapping between levels and values. For x and y aesthetics, ggplot2 does not create a legend, but it creates an axis line with tick marks and a label. The axis line acts as a legend; it explains the mapping between locations and values.\n\nYou've experimented with the most common aesthetics for points: `x`, `y`, `color`, `size`, `alpha` and `shape`. Each geom uses its own set of aesthetics (you wouldn't expect a line to have a shape, for example). To find out which aesthetics a geom uses, open its help page, e.g. `?geom_line`.\n\nThis raises a new question that we've only brushed over: what is a geom?\n\n\n##\n\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"03-geometric-objects.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "02-aesthetic-mappings_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}