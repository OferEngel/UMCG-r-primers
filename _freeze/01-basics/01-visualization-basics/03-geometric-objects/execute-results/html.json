{
  "hash": "56979771ab23670c1821bd3bfa0d4d55",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Geometric objects\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - ggplot2\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n\nHow are these two plots similar? \n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-geometric-objects_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![](03-geometric-objects_files/figure-html/unnamed-chunk-2-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nBoth plots contain the same x variable, the same y variable, and both describe the same data. But the plots are not identical. Each plot uses a different visual object to represent the data. In ggplot2 syntax, we say that they use different __geoms__.\n\nA __geom__ is the geometrical object that a plot uses to represent observations. People often describe plots by the type of geom that the plot uses. For example, bar charts use bar geoms, line charts use line geoms, boxplots use boxplot geoms, and so on. Scatterplots break the trend; they use the point geom. \n\nAs we see above, you can use different geoms to plot the same data. The plot on the left uses the point geom, and the plot on the right uses the smooth geom, a smooth line fitted to the data. \n\n### Geom functions\n\nTo change the geom in your plot, change the geom function that you add to `ggplot()`. For example, take this code which makes the plot on the left (above), and change `geom_point()` to `geom_smooth()`. What do you get? \n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point()\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_smooth()\n```\n\n:::\n\n###\n\nGood job! You get the plot on the right (above).\n\n\n### More about geoms\n\nggplot2 provides over 30 geom functions that you can use to make plots, and extension packages provide even more (see <https://exts.ggplot2.tidyverse.org/gallery/> for a sampling).\n\nUntil then, the best way to get a comprehensive overview of the available geoms is with the [ggplot2 cheatsheet](https://rstudio.github.io/cheatsheets/html/data-visualization.html). To learn more about any single geom, look at its help page, e.g. `?geom_smooth`.\n\n### Exercise 1\n\nWhat geom would you use to draw a line chart? A boxplot? A histogram? An area chart?\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_1\" onsubmit=\"return validate_form_1()\" method=\"post\">\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_1\" value=\"geom_linechart(), boxplot(), geom_histogram(), geom_area()\"/>\n<label>geom_linechart(), boxplot(), geom_histogram(), geom_area()</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_2\" value=\"geom_line(), boxplot(), geom_histogram(), geom_areachart()\"/>\n<label>geom_line(), boxplot(), geom_histogram(), geom_areachart()</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_3\" value=\"geom_line(), geom_boxplot(), geom_histogram(), geom_area()\"/>\n<label>geom_line(), geom_boxplot(), geom_histogram(), geom_area()</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_1\"></div>\n</form>\n<script>function validate_form_1() {var x, text; var x = document.forms['form_1']['answer_1'].value;if (x == 'geom_line(), geom_boxplot(), geom_histogram(), geom_area()'){text = 'Correct!';} else {text = 'I have a different answer';} document.getElementById('result_1').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_1').innerText == 'Correct!';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n\n\n\n### Exercise 2\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**What does the `se` argument to `geom_smooth()` do?**\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_2\" onsubmit=\"return validate_form_2()\" method=\"post\">\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_1\" value=\"controls whether or not to **s**how **e**rrors\"/>\n<label>controls whether or not to **s**how **e**rrors</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_2\" value=\"Adds or removes a standard error ribbon around the smooth line\"/>\n<label>Adds or removes a standard error ribbon around the smooth line</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_3\" value=\"chooses a method for calculating the smooth line\"/>\n<label>chooses a method for calculating the smooth line</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_4\" value=\"Nothing. `se` is not an argument of `geom_smooth()`\"/>\n<label>Nothing. `se` is not an argument of `geom_smooth()`</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_2\"></div>\n</form>\n<script>function validate_form_2() {var x, text; var x = document.forms['form_2']['answer_2'].value;if (x == 'Adds or removes a standard error ribbon around the smooth line'){text = 'Correct!';} else {text = 'I have a different answer';} document.getElementById('result_2').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2;res1 = document.getElementById('result_1').innerText == 'Correct!'; res2 = document.getElementById('result_2').innerText == 'Correct!';text = res1 + res2;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n:::\n\nIf you are not sure how to answer the question above, try running the code below in the previous code chunk!\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_smooth(se = FALSE)\n```\n:::\n\n\n\n\n\n\n### Putting it all together\n\nThe ideas that you've learned here: geoms, aesthetics, and the implied existence of a data space and a visual space combine to form a system known as the Grammar of Graphics.\n\nThe Grammar of Graphics provides a systematic way to build any graph, and it underlies the ggplot2 package. In fact, the first two letters of ggplot2 stand for \"Grammar of Graphics\".\n\n### The Grammar of Graphics\n\nThe best way to understand the Grammar of Graphics is to see it explained in action:\n\n\n\n\n```{=html}\n<div class=\"ratio ratio-4x3\">\n<iframe src=\"https://player.vimeo.com/video/223812632\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n</div>\n```\n\n\n\n\n##\n\nThroughout this tutorial, I've referred to ggplot2 as a package. What does that mean?\n\nThe R language is subdivided into __packages__, small collections of data sets and functions that all focus on a single task. The functions that we used in this tutorial come from one of those packages, the ggplot2 package, which focuses on visualizing data.\n\n### What should you know about packages?\n\nWhen you first install R, you get a small collection of core packages known as __base R__. The remaining packages---there are over 10,000 of them---are optional. You don't need to install them unless you want to use them.\n\nggplot2 is one of these optional packages, so are the other packages that we will look at in these tutorials. Some of the most popular and most modern parts of R come in the optional packages.\n\nYou don't need to worry about installing packages in these tutorials. Each tutorial comes with all of the packages that you need pre-installed; this is how we make the tutorials easy to use.\n\nHowever, one day, you may want to use R outside of these tutorials. When that day comes, you'll want to remember which packages to download to acquire the functions you use here. Throughout the tutorials, I will try to make it as clear as possible where each function comes from!\n\n\n### Where to from here\n\nCongratulations! You can use the ggplot2 code template to plot any dataset in many different ways. As you begin exploring data, you should incorporate these tools into your workflow.\n\nYour new data visualization skills will make it easier to learn other parts of R, because you can now visualize the results of any change that you make to data. you'll put these skills to immediate use in the next tutorial, which will show you how to extract values from datasets, as well as how to compute new variables and summary statistics from your data. See you there.\n\n##\n\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [
      "03-geometric-objects_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}