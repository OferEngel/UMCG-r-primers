{
  "hash": "5c1ccac343a01d6b96fe7d0bbec0bbc0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"The most popular names\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n          <script src=\"/js/bootstrapify.js\"></script>\n---\n\n\n\n\n\n\n### What are the most popular names of all time? {.no-hide}\n\nLet's use `babynames` to answer a different question: what are the most popular names of all time?\n\nThis question seems simple enough, but to answer it we need to be more precise: how do you define \"the most popular\" names? Try to think of several definitions and then click Continue. After the Continue button, I will suggest two definitions of my own.\n\n### Two definitions of popular\n\nI suggest that we focus on two definitions of _popular_, one that uses sums and one that uses ranks:\n\n1. **Sums** - A name is popular _if the total number of children that have the name is large when you sum across years_.\n2. **Ranks** - A name is popular _if it consistently ranks among the top names from year to year_.\n\nThis raises a question:\n\n::: {.callout-note appearance=\"simple\" icon=false .question}\n\n**Do we have enough information in `babynames` to compare the popularity of names?**\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_1\" onsubmit=\"return validate_form_1()\" method=\"post\">\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_1\" value=\"No. No cell in `babynames` contains a rank value or a sum across years.\"/>\n<label>No. No cell in `babynames` contains a rank value or a sum across years.</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_2\" value=\"Yes. We can use the information in `babynames` to compute the values we want.\"/>\n<label>Yes. We can use the information in `babynames` to compute the values we want.</label>\n<br/>\n<input type=\"submit\" value=\"Submit answer\"/>\n<div id=\"result_1\"></div>\n</form>\n<script>function validate_form_1() {var x, text; var x = document.forms['form_1']['answer_1'].value;if (x == 'Yes. We can use the information in `babynames` to compute the values we want.'){text = 'Correct!';} else {text = 'I have a different answer';} document.getElementById('result_1').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_1').innerText == 'Correct!';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n:::\n\n### Deriving information\n\nEvery data frame that you meet implies more information than it displays. For example, `babynames` does not display the total number of children who had your name, but `babynames` certainly implies what that number is. To discover the number, you only need to do a calculation:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbabynames |> \n  filter(name == \"Andrew\", sex == \"M\") |> \n  summarize(total = sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 1\n    total\n    <int>\n1 1283910\n```\n\n\n:::\n:::\n\n\n\n\n### Useful functions\n\n{dplyr} provides three functions that can help you reveal the information implied by your data: \n\n* `summarize()`  \n* `group_by()`  \n* `mutate()`\n\nLike `select()`, `filter()` and `arrange()`, these functions all take a data frame as their first argument and return a new data frame as their output, which makes them easy to use in pipes.\n\nLet's master each function and use them to analyze popularity as we go.\n\n##\n\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"02-summarize.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}