{
  "hash": "29adb34a6a24d07bdcc5936c63abc130",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Your name\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n---\n\n\n\n\n\n\n### The history of your name {.no-hide}\n\nYou can use the data in `babynames` to make graphs like this, which reveal the history of a name, perhaps your name.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](01-your-name_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n\nBut before you do, you will need to trim down `babynames`. At the moment, there are more rows in `babynames` than you need to build your plot. \n\n### An example\n\nTo see what I mean, consider how I made the plot above: I began with the entire dataset, which if plotted as a scatterplot would've looked like this.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(babynames) +\n  geom_point(aes(x = year, y = prop)) +\n  labs(title = \"Popularity of every name in the dataset\")\n```\n\n::: {.cell-output-display}\n![](01-your-name_files/figure-html/plot-all-names-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n\n\nI then narrowed the data to just the rows that contain my name, before plotting the data with a line geom. Here's how the rows with just my name look as a scatterplot.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbabynames |> \n  filter(name == \"Andrew\", sex == \"M\") |> \n  ggplot() +\n    geom_point(aes(x = year, y = prop)) +\n    labs(title = \"Popularity of the name Andrew\")\n```\n\n::: {.cell-output-display}\n![](01-your-name_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n\n\nIf I had skipped this step, my line graph would've connected all of the points in the large dataset, creating an uninformative graph.\n\n\n\n\n::: {.cell layout-align=\"center\" cached='true'}\n\n```{.r .cell-code}\nggplot(babynames) +\n  geom_line(aes(x = year, y = prop)) +\n  labs(title = \"Popularity of every name in the dataset\")\n```\n\n::: {.cell-output-display}\n![](01-your-name_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n\n\nYour goal in this section is to repeat this process for your own name (or a name that you choose). Along the way, you will learn a set of functions that isolate information within a dataset. \n\n### Isolating data\n\nThis type of task occurs often in data science: you need to extract data from a table before you can use it. You can do this task quickly with three functions that come in the {dplyr} package:\n\n1. **`select()`**, which extracts columns from a data frame\n1. **`filter()`**, which extracts rows from a data frame\n1. **`arrange()`**, which moves important rows to the top of a data frame\n\nEach function takes a data frame or tibble as its first argument and returns a new data frame or tibble as its output. \n\n\n##\n\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"02-select.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}