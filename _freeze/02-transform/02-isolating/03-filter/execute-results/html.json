{
  "hash": "dd3320afe85b4b768d602f0b1a4054bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"`filter()`\"\nformat:\n  html: \n    toc: false\n    section-divs: true\n    include-after-body: \n      - text: |\n          <script src=\"/js/progressive-reveal.js\"></script>\n\nengine: knitr\nfilters:\n  - webr\nwebr:\n  packages:\n    - babynames\n    - dplyr\n  cell-options:\n    editor-font-scale: 0.85\n    fig-width: 6\n    fig-height: 3.7\n    out-width: \"70%\"\n---\n\n\n\n\n\n\nWhereas `select()` extracts columns, `filter()` extracts rows from a data frame. As with `select()`, the first argument of `filter()` should be a data frame to extract rows from. The arguments that follow should be logical tests; `filter()` will return every row for which the tests return `TRUE`.\n\n### `filter()` in action\n\nFor example, the code chunk below returns every row with the name \"Sea\" in `babynames`. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfilter(babynames, name == \"Sea\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n   year sex   name      n       prop\n  <dbl> <chr> <chr> <int>      <dbl>\n1  1982 F     Sea       5 0.00000276\n2  1985 M     Sea       6 0.00000312\n3  1986 M     Sea       5 0.0000026 \n4  1998 F     Sea       5 0.00000258\n```\n\n\n:::\n:::\n\n\n\n\n### Logical tests\n\nTo get the most from filter, you will need to know how to use R's logical test operators, which are summarized below.\n\n| Logical operator | tests                                | Example     |\n|------------------|--------------------------------------|-------------|\n| **`>`**          | Is `x` greater than `y`?             | `x > y`     |\n| **`>=`**         | Is `x` greater than or equal to `y`? | `x >= y`    |\n| **`<`**          | Is `x` less than `y`?                | `x < y`     |\n| **`<=`**         | Is `x` less than or equal to `y`?    | `x <= y`    |\n| **`==`**         | Is `x` equal to `y`?                 | `x == y`    |\n| **`!=`**         | Is `x` not equal to `y`?             | `x != y`    |\n| **`is.na()`**    | Is `x` an `NA`?                      | `is.na(x)`  |\n| **`!is.na()`**   | Is `x` not an `NA`?                  | `!is.na(x)` |\n\n: {tbl-colwidths=\"[15, 35, 35]\" .striped .hover .table-sm}\n\n\n### Exercise: Logical operators\n\nSee if you can use the logical operators to manipulate our code below to show:\n\n* All of the names where prop is greater than or equal to 0.08\n* All of the children named \"Khaleesi\"\n* All of the names that have a missing value for `n` (Hint: this should return an empty data set).\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nfilter(babynames, name == \"Sea\")\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nfilter(babynames, prop >= 0.08)\nfilter(babynames, name == \"Khaleesi\")\nfilter(babynames, is.na(n))\n```\n\n:::\n\n### Two common mistakes\n\nWhen you use logical tests, be sure to look out for two common mistakes. One appears in each code chunk below. Can you find them? When you spot a mistake, fix it and then run the chunk to confirm that it works.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nfilter(babynames, name = \"Sea\")\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nfilter(babynames, name == \"Sea\")\n```\n\n:::\n\n###\n\nGood job! Remember to use `==` instead of `=` when testing for equality.\n\n###\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nfilter(babynames, name == Sea)\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nfilter(babynames, name == \"Sea\")\n```\n\n:::\n\n###\n\nGood job! As written this code would check that name is equal to the contents of the object named Sea, which does not exist.\n\n\n### Two mistakes: Recap\n\nWhen you use logical tests, be sure to look out for these two common mistakes:\n\n1. Using `=` instead of `==` to test for equality.\n2. Forgetting to use quotation marks when comparing strings, e.g. `name == Abby`, instead of `name == \"Abby\"` \n\n### Combining tests\n\nIf you provide more than one test to `filter()`, `filter()` will combine the tests with an **and** statement (`&`): it will only return the rows that satisfy all of the tests. \n\nTo combine multiple tests in a different way, use R's Boolean operators. For example, the code below will return all of the children named Sea or Anemone.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfilter(babynames, name == \"Sea\" | name == \"Anemone\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n   year sex   name        n       prop\n  <dbl> <chr> <chr>   <int>      <dbl>\n1  1982 F     Sea         5 0.00000276\n2  1985 M     Sea         6 0.00000312\n3  1986 M     Sea         5 0.0000026 \n4  1998 F     Sea         5 0.00000258\n5  2012 F     Anemone     6 0.0000031 \n```\n\n\n:::\n:::\n\n\n\n\n### Boolean operators\n\nYou can find a complete list or base R's Boolean operators in the table below.\n\n| Boolean operator | represents                                 | Example             |\n|------------------|-------------------------------------|------------------|\n| **`&`**          | Are *both* `A` and `B` true?               | `A & B`             |\n| **`|`**          | Are *one or both* of `A` and `B` true?     | `A | B`             |\n| **`!`**          | Is `A` *not* true?                         | `!A`                |\n| **`xor()`**      | Is *one and only one* of `A` and `B` true? | `xor(A, B)`         |\n| **`%in%`**       | Is `x` in the set of `a`, `b`, and `c`?    | `x %in% c(a, b, c)` |\n| **`any()`**      | Are *any* of `A`, `B`, or `C` true?        | `any(A, B, C)`      |\n| **`all()`**      | Are *all* of `A`, `B`, or `C` true?        | `all(A, B, C)`      |\n\n: {tbl-colwidths=\"[15, 35, 35]\" .striped .hover .table-sm}\n\n\n### Exercise: Combining tests\n\nUse Boolean operators to alter the code chunk below to return only the rows that contain:\n\n* *Girls* named Sea\n* Names that were used by exactly 5 or 6 children in 1880\n* Names that are one of Acura, Lexus, or Yugo\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nfilter(babynames, name == \"Sea\" | name == \"Anemone\")\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nfilter(babynames, name == \"Sea\", sex == \"F\")\nfilter(babynames, n == 5 | n == 6, year == 1880)\nfilter(babynames, name %in% c(\"Acura\", \"Lexus\", \"Yugo\"))\n```\n\n:::\n\n### Two more common mistakes\n\nLogical tests also invite two common mistakes that you should look out for. Each is displayed in a code chunk below, one produces an error and the other is needlessly verbose. Diagnose the chunks and then fix the code.\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nfilter(babynames, 10 < n < 20)\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nfilter(babynames, 10 < n, n < 20)\n```\n\n:::\n\n###\n\nGood job! You cannot combine two logical tests in R without using a Boolean operator (or at least a comma between filter arguments).\n\n::: {.panel-tabset}\n## {{< fa code >}}&ensp;Interactive editor\n\n```{webr-r}\nfilter(babynames, n == 5 | n == 6 | n == 7 | n == 8 | n == 9)\n\n\n```\n\n## {{< fa circle-check >}}&ensp;Solution\n\n```r\nfilter(babynames, n %in% c(5, 6, 7, 8, 9))\n```\n\n:::\n\n###\n\nGood job! Although the first code works, you should make your code more concise by collapsing multiple or statements into an `%in%` statement when possible.\n\n### Two more common mistakes: Recap\n\nWhen you combine multiple logical tests, be sure to look out for these two common mistakes:\n\n1. Collapsing multiple logical tests into a single test _without using a boolean operator_ \n2. Using repeated `|` instead of `%in%`, e.g. `x == 1 | x == 2 | x == 3` instead of `x %in% c(1, 2, 3)`\n\n##\n\n\n\n\n::: {.cell layout-align=\"center\"}\n<section id=\"buttons\">\n<button id=\"continueButton\" class=\"btn btn-primary float-start me-2\">Continue</button>\n<a id=\"nextTopicButton\" class=\"btn btn-danger disabled\" href=\"04-arrange.html\" role=\"button\">Next topic</a>\n<button id=\"resetButton\" class=\"btn btn-outline-warning btn-sm float-end\">Start over</button>\n</section>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}